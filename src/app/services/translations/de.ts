import { Translations } from '../translation.service';

export const DE_TRANSLATIONS: Translations = {
    // Navigation
    'nav.home': 'Home',
    'nav.weather': 'Wetter',
    'nav.crypto': 'Krypto',
    'nav.angular': 'Angular',
    'nav.features': 'Features',

    // Home Component
    'home.greeting': 'Hi, ich bin',
    'home.subtitle': 'Fullstack Developer',
    'home.intro': 'Willkommen auf meiner Portfolio-Seite! Ich bin ein leidenschaftlicher Entwickler mit Fokus auf Angular und moderne Webtechnologien. Hier demonstriere ich meine Kenntnisse durch verschiedene Features und Projekte.',
    'home.linkedin': 'LinkedIn',
    'home.cta.viewPortfolio': 'Portfolio ansehen',
    'home.cta.contact': 'Kontakt aufnehmen',
    'home.stats.yearsExperience': 'Jahre Erfahrung',
    'home.stats.projects': 'Projekte',
    'home.stats.technologies': 'Technologien',
    'home.stats.engagement': 'Engagement',
    'home.skills.title': 'Meine Expertise',
    'home.skills.subtitle': 'Technologien und Tools mit denen ich täglich arbeite',
    'home.skills.frontend': 'Frontend',
    'home.skills.backend': 'Backend & APIs',
    'home.skills.tools': 'Tools & DevOps',
    'home.projects.title': 'Ausgewählte Projekte',
    'home.projects.subtitle': 'Entdecke meine neuesten Arbeiten und technischen Demonstrationen',
    'home.projects.viewAll': 'Alle Projekte ansehen',
    'home.features.title': 'Feature Demonstrationen',
    'home.features.weather.title': 'Wetter-App',
    'home.features.weather.description': 'Vollständige Wetter-Anwendung mit kostenloser API-Integration',
    'home.features.weather.button': 'Wetter ansehen',
    'home.features.crypto.title': 'Krypto-Tracker',
    'home.features.crypto.description': 'Live-Preise und 24h-Veränderungen der Top-Kryptowährungen',
    'home.features.crypto.button': 'Krypto ansehen',
    'home.features.angular.title': 'Angular v20 Best Practices',
    'home.features.angular.description': 'Umfassende Zusammenfassung moderner Angular-Entwicklung mit Signals und Standalone Components',
    'home.features.angular.button': 'Angular ansehen',
    'home.features.all.button': 'Alle Features',

    // Technology names
    'tech.angular': 'Angular',
    'tech.typescript': 'TypeScript',
    'tech.scss': 'SCSS',
    'tech.material': 'Material Design',
    'tech.rxjs': 'RxJS',
    'tech.restful': 'RESTful APIs',
    'tech.httpclient': 'HttpClient',
    'tech.state': 'State Management',
    'tech.node': 'Node.js',
    'tech.git': 'Git',
    'tech.vscode': 'VS Code',
    'tech.npm': 'NPM',
    'tech.webpack': 'Webpack',
    'tech.openweather': 'OpenWeather API',
    'tech.coingecko': 'CoinGecko API',
    'tech.charts': 'Charts',

    // Weather Component
    'weather.title': 'Wettervorhersage',
    'weather.subtitle': 'Aktuelle Wetterdaten für deine Stadt',
    'weather.search.label': 'Stadt eingeben',
    'weather.search.placeholder': 'z.B. Berlin, München, Zürich...',
    'weather.search.button': 'Suchen',
    'weather.loading': 'Lädt...',
    'weather.error': 'Fehler beim Laden der Wetterdaten',
    'weather.error.title': 'Fehler aufgetreten',
    'weather.error.tip': 'Tipp',
    'weather.error.suggestion': 'Prüfe die Schreibweise oder versuche es mit einem anderen Stadtnamen',
    'weather.error.close': 'Schließen',
    'weather.popular.title': 'Beliebte Städte',
    'weather.refresh': 'Aktualisieren',
    'weather.lastUpdated': 'Zuletzt aktualisiert',
    'weather.backToHome.button': 'Zurück zur Startseite',
    'weather.backToHome.tooltip': 'Zurück zur Startseite',
    'weather.feelsLike': 'Gefühlt',
    'weather.minMax': 'Min/Max',
    'weather.humidity': 'Luftfeuchtigkeit',
    'weather.pressure': 'Luftdruck',
    'weather.wind': 'Wind',
    'weather.sunrise': 'Sonnenaufgang',
    'weather.sunset': 'Sonnenuntergang',

    // Crypto Component
    'crypto.title': 'Kryptowährungen',
    'crypto.subtitle': 'Live-Preise der Top Kryptowährungen',
    'crypto.loading': 'Lädt...',
    'crypto.refresh.button': 'Aktualisieren',
    'crypto.refresh.tooltip': 'Daten neu laden',
    'crypto.currency.label': 'Währung:',
    'crypto.error.title': 'Fehler beim Laden',
    'crypto.error.dismiss': 'Schließen',
    'crypto.lastUpdate': 'Letztes Update',
    'crypto.dataStale': 'Daten möglicherweise veraltet',
    'crypto.topCurrencies': 'Top Kryptowährungen',
    'crypto.table.rank': 'Rang',
    'crypto.table.name': 'Name',
    'crypto.table.price': 'Preis',
    'crypto.table.change24h': '24h Veränderung',
    'crypto.table.marketCap': 'Marktkapitalisierung',
    'crypto.marketSize.label': 'Marktgröße',
    'crypto.marketSize.top100': 'Top 100 Coins',
    'crypto.marketSize.top250': 'Top 250 Coins',
    'crypto.marketSize.top500': 'Top 500 Coins',
    'crypto.marketSize.top1000': 'Top 1.000 Coins',
    'crypto.marketSize.top2500': 'Top 2.500 Coins',
    'crypto.pageSize.label': 'Coins pro Seite',
    'crypto.pageSize.coinsPerPage': 'Coins pro Seite',
    'crypto.pagination.showing': 'Anzeige',
    'crypto.pagination.of': 'von',
    'crypto.pagination.previous': 'Vorherige Seite',
    'crypto.pagination.next': 'Nächste Seite',
    'crypto.empty.title': 'Keine Daten verfügbar',
    'crypto.empty.subtitle': 'Klicke auf "Daten laden" um die aktuellen Kryptowährungspreise zu sehen.',
    'crypto.loadData': 'Daten laden',
    'crypto.clickForDetails': 'Klicken für Details',
    'crypto.backToHome.button': 'Zur Startseite',
    'crypto.backToHome.tooltip': 'Zurück zur Startseite',

    // Angular Summary Component
    'angular.header.title': 'Angular v20 Best Practices & Zusammenfassung',
    'angular.header.subtitle': 'Moderne Webentwicklung mit Angular 20 - Signals, Standalone Components & mehr',
    'angular.backToHome': 'Zurück zur Startseite',
    'angular.sections.coreFeatures': 'Kern-Features',
    'angular.sections.bestPractices': 'Best Practices',
    'angular.sections.technologies': 'Verwendete Technologien',
    'angular.sections.examples': 'Code-Beispiele',
    'angular.sections.advanced': 'Erweiterte Themen',
    'angular.sections.architecture': 'Architektur-Muster',
    'angular.sections.tools': 'CLI & DevTools',
    'angular.sections.realWorldPatterns': 'Real-World Patterns',
    'angular.sections.realWorldPatternsDesc': 'Praxisbewährte Lösungen für häufige Entwicklungsszenarien',
    'angular.sections.developmentTools': 'Entwicklungs-Tools',
    'angular.sections.developmentToolsDesc': 'Moderne Werkzeuge und Konfigurationen für professionelle Angular-Entwicklung',
    'angular.sections.deployment': 'Deployment-Strategien',
    'angular.sections.deploymentDesc': 'Best Practices für CI/CD, Docker und Cloud-Deployment',
    'angular.sections.accessibility': 'Barrierefreiheit (a11y)',
    'angular.sections.accessibilityDesc': 'WCAG-konforme Implementierungen für inklusive Webanwendungen',
    'angular.sections.commonPitfalls': 'Häufige Fehler & Anti-Patterns',
    'angular.sections.commonPitfallsDesc': 'Typische Stolpersteine vermeiden und sauberen Code schreiben',
    'angular.sections.resources': 'Ressourcen & Links',
    'angular.sections.resourcesDesc': 'Nützliche Quellen für weiteres Lernen und Community-Support',
    
    // Common translations
    'angular.common.useCases': 'Anwendungsfälle',
    'angular.common.implementation': 'Implementierung',
    'angular.common.setup': 'Installation & Setup',
    'angular.common.configuration': 'Konfiguration',
    'angular.common.steps': 'Schritte',
    'angular.common.example': 'Beispiel',
    'angular.common.bestPractices': 'Best Practices',
    'angular.common.problem': 'Problem',
    'angular.common.solution': 'Lösung',
    'angular.features.signals.title': 'Signals',
    'angular.features.signals.description': 'Reaktives State Management mit signal(), computed() und effect() für optimale Performance',
    'angular.features.standalone.title': 'Standalone Components',
    'angular.features.standalone.description': 'Modullose Architektur - Komponenten sind standardmäßig standalone',
    'angular.features.inject.title': 'inject() Funktion',
    'angular.features.inject.description': 'Dependency Injection mit inject() statt Constructor-Injection',
    'angular.features.controlFlow.title': 'Control Flow',
    'angular.features.controlFlow.description': 'Native @if, @for, @switch Syntax statt struktureller Direktiven',
    'angular.features.deferrable.title': 'Deferrable Views (@defer)',
    'angular.features.deferrable.description': 'Lazy Loading von Templates mit @defer, @placeholder, @loading und @error Blöcken',
    'angular.features.inputOutput.title': 'input() & output() Funktionen',
    'angular.features.inputOutput.description': 'Signal-basierte Component Inputs und Outputs ersetzen @Input() und @Output() Decorators',
    'angular.features.viewQueries.title': 'viewChild() & viewChildren()',
    'angular.features.viewQueries.description': 'Signal-basierte View Queries für type-safe Zugriff auf Child Components und DOM-Elemente',
    'angular.features.model.title': 'model() für Two-Way Binding',
    'angular.features.model.description': 'Vereinfachtes Two-Way Data Binding mit WritableSignal für bidirektionale Kommunikation',
    'angular.features.onPush.title': 'OnPush Change Detection',
    'angular.features.onPush.description': 'Optimierte Performance durch ChangeDetectionStrategy.OnPush',
    'angular.features.httpClient.title': 'HttpClient mit Signals',
    'angular.features.httpClient.description': 'Moderne HTTP-Kommunikation mit provideHttpClient(withFetch())',
    'angular.features.resource.title': 'Resource API (Experimental)',
    'angular.features.resource.description': 'Deklarative HTTP-Requests mit automatischem Loading State und Error Handling',
    'angular.features.typedForms.title': 'Typed Reactive Forms',
    'angular.features.typedForms.description': 'Vollständig typisierte Forms mit FormControl<T>, FormGroup<T> und FormArray<T>',
    'angular.features.router.title': 'Standalone Router',
    'angular.features.router.description': 'Funktionales Routing mit provideRouter(), Guards, Resolvers und Lazy Loading',
    'angular.features.material.title': 'Material Design 3',
    'angular.features.material.description': 'Angular Material Components mit Material Design 3 Theming und Accessibility',
    'angular.features.devtools.title': 'Angular DevTools',
    'angular.features.devtools.description': 'Browser Extension für Component Inspection, Profiling und Dependency Injection Debugging',
    'angular.features.vite.title': 'Vite & ESBuild',
    'angular.features.vite.description': 'Ultraschnelle Build-Zeiten mit Vite Dev Server und ESBuild für Production Builds',
    'angular.bestPractices.components.title': 'Komponenten',
    'angular.bestPractices.components.item1': 'Kleine, fokussierte Komponenten mit Single Responsibility',
    'angular.bestPractices.components.item2': 'input() und output() Funktionen statt Decorators',
    'angular.bestPractices.components.item3': 'Inline Templates für kleine Komponenten bevorzugen',
    'angular.bestPractices.components.item4': 'OnPush Change Detection für optimale Performance',
    'angular.bestPractices.components.item5': 'class und style Bindings statt ngClass/ngStyle',
    'angular.bestPractices.components.item6': 'Lifecycle Hooks implementieren (OnInit, OnDestroy, etc.)',
    'angular.bestPractices.components.item7': 'Protected für Template-only Members, Private für interne Logik',
    'angular.bestPractices.components.item8': 'Komplexe Template-Logik in computed() Signals auslagern',
    'angular.bestPractices.state.title': 'State Management',
    'angular.bestPractices.state.item1': 'Signals für lokalen Komponenten-State verwenden',
    'angular.bestPractices.state.item2': 'computed() für abgeleiteten State nutzen',
    'angular.bestPractices.state.item3': 'State-Transformationen pure und vorhersagbar halten',
    'angular.bestPractices.state.item4': 'update() oder set() verwenden, nie mutate()',
    'angular.bestPractices.state.item5': 'effect() nur für Seiteneffekte, nicht für State-Updates',
    'angular.bestPractices.state.item6': 'untracked() nutzen um zirkuläre Dependencies zu vermeiden',
    'angular.bestPractices.templates.title': 'Templates',
    'angular.bestPractices.templates.item1': 'Native Control Flow (@if, @for, @switch) verwenden',
    'angular.bestPractices.templates.item2': 'Templates einfach halten, komplexe Logik vermeiden',
    'angular.bestPractices.templates.item3': 'Async Pipe für Observables nutzen',
    'angular.bestPractices.templates.item4': 'trackBy mit @for für effizientes List-Rendering',
    'angular.bestPractices.templates.item5': '@defer für Lazy Loading schwerer Components nutzen',
    'angular.bestPractices.services.title': 'Services',
    'angular.bestPractices.services.item1': 'Services um Single Responsibility designen',
    'angular.bestPractices.services.item2': 'providedIn: "root" für Singleton Services',
    'angular.bestPractices.services.item3': 'inject() Funktion statt Constructor Injection',
    'angular.bestPractices.services.item4': 'Readonly exposed State mit privaten Signals für Mutationen',
    'angular.bestPractices.services.item5': 'Service-Logik von Präsentations-Logik trennen',
    'angular.bestPractices.performance.title': 'Performance',
    'angular.bestPractices.performance.item1': 'OnPush Change Detection konsequent einsetzen',
    'angular.bestPractices.performance.item2': 'Lazy Loading für Feature Routes implementieren',
    'angular.bestPractices.performance.item3': 'NgOptimizedImage für statische Bilder verwenden',
    'angular.bestPractices.performance.item4': 'TrackBy bei @for verwenden für optimales Rendering',
    'angular.bestPractices.performance.item5': '@defer für on-demand Component Loading nutzen',
    'angular.bestPractices.performance.item6': 'Pure Pipes bevorzugen (default), Impure nur wenn nötig',
    'angular.bestPractices.performance.item7': 'Web Workers für CPU-intensive Berechnungen einsetzen',
    'angular.bestPractices.typescript.title': 'TypeScript',
    'angular.bestPractices.typescript.item1': 'Strict Type Checking aktiviert',
    'angular.bestPractices.typescript.item2': 'Type Inference nutzen wenn offensichtlich',
    'angular.bestPractices.typescript.item3': 'any vermeiden, unknown bei Unsicherheit verwenden',
    'angular.bestPractices.typescript.item4': 'readonly für Properties die nicht ändern',
    'angular.bestPractices.typescript.item5': 'const für alle Variablen die nicht reassigned werden',
    'angular.bestPractices.typescript.item6': 'Explizite Return-Types für öffentliche API-Methoden',
    'angular.bestPractices.accessibility.title': 'Accessibility (a11y)',
    'angular.bestPractices.accessibility.item1': 'Semantische HTML-Elemente verwenden',
    'angular.bestPractices.accessibility.item2': 'ARIA-Labels für dynamische Inhalte hinzufügen',
    'angular.bestPractices.accessibility.item3': 'Keyboard-Navigation für alle interaktiven Elemente',
    'angular.bestPractices.accessibility.item4': 'Ausreichende Farbkontraste (WCAG 2.1 AA)',
    'angular.bestPractices.accessibility.item5': 'Focus-Management bei modalen Dialogen und Routen',
    'angular.bestPractices.testing.title': 'Testing',
    'angular.bestPractices.testing.item1': 'Unit Tests für alle Business-Logic schreiben',
    'angular.bestPractices.testing.item2': 'TestBed für Component Tests mit Dependency Injection',
    'angular.bestPractices.testing.item3': 'Signals mit TestBed.inject() und fixture.detectChanges() testen',
    'angular.bestPractices.testing.item4': 'Mock Services für isolierte Component Tests',
    'angular.bestPractices.testing.item5': 'E2E Tests für kritische User Journeys (Cypress/Playwright)',
    'angular.bestPractices.errorHandling.title': 'Error Handling',
    'angular.bestPractices.errorHandling.item1': 'Global Error Handler für unerwartete Fehler implementieren',
    'angular.bestPractices.errorHandling.item2': 'HTTP Interceptor für zentrale API-Fehlerbehandlung',
    'angular.bestPractices.errorHandling.item3': 'catchError() für Observable Error Handling nutzen',
    'angular.bestPractices.errorHandling.item4': 'User-freundliche Fehlermeldungen mit Kontext anzeigen',
    'angular.bestPractices.security.title': 'Security',
    'angular.bestPractices.security.item1': 'Sanitization für User-Input nutzen (XSS-Schutz)',
    'angular.bestPractices.security.item2': 'CSRF-Tokens bei state-changing Requests verwenden',
    'angular.bestPractices.security.item3': 'HTTP Interceptor für Authorization Headers einsetzen',
    'angular.bestPractices.security.item4': 'Keine sensiblen Daten in LocalStorage speichern',
    'angular.bestPractices.security.item5': 'Content Security Policy (CSP) konfigurieren',
    'angular.bestPractices.codeOrganization.title': 'Code-Organisation',
    'angular.bestPractices.codeOrganization.item1': 'Nach Features organisieren, nicht nach Datei-Typen',
    'angular.bestPractices.codeOrganization.item2': 'Shared/Common Module für wiederverwendbare Components',
    'angular.bestPractices.codeOrganization.item3': 'Core Module für Singleton Services und Guards',
    'angular.bestPractices.codeOrganization.item4': 'Ein Konzept pro Datei (Component, Service, etc.)',
    'angular.bestPractices.codeOrganization.item5': 'Index-Dateien (index.ts) für public API exports',
    'angular.bestPractices.dependency.title': 'Dependency Management',
    'angular.bestPractices.dependency.item1': 'Abhängigkeiten regelmäßig aktualisieren (ng update)',
    'angular.bestPractices.dependency.item2': 'Peer Dependencies beachten und kompatibel halten',
    'angular.bestPractices.dependency.item3': 'Bundle Size mit source-map-explorer überwachen',
    'angular.bestPractices.dependency.item4': 'Tree-shakeable Providers nutzen (providedIn)',
    'angular.bestPractices.buildDeploy.title': 'Build & Deployment',
    'angular.bestPractices.buildDeploy.item1': 'Production Build mit --configuration=production',
    'angular.bestPractices.buildDeploy.item2': 'AOT Compilation für bessere Performance',
    'angular.bestPractices.buildDeploy.item3': 'Environment-spezifische Konfigurationen nutzen',
    'angular.bestPractices.buildDeploy.item4': 'Source Maps nur in Development aktivieren',
    'angular.bestPractices.buildDeploy.item5': 'CI/CD Pipeline für automatisierte Tests und Deployment',
    'angular.examples.signals.title': 'Signals Beispiel',
    'angular.examples.signals.subtitle': 'Reaktives State Management',
    'angular.examples.signals.description': 'Signals bieten eine einfache und performante Möglichkeit, reaktiven State zu verwalten.',
    'angular.examples.inject.title': 'Dependency Injection',
    'angular.examples.inject.subtitle': 'Moderne DI mit inject()',
    'angular.examples.inject.description': 'Die inject() Funktion ermöglicht sauberere und besser lesbare Dependency Injection.',
    'angular.examples.controlFlow.title': 'Control Flow',
    'angular.examples.controlFlow.subtitle': 'Native Template Syntax',
    'angular.examples.controlFlow.description': 'Native @if, @else Syntax ist intuitiver und performanter als *ngIf.',
    'angular.actions.title': 'Bereit für mehr?',
    'angular.actions.description': 'Erkunde weitere Funktionen und Projekte auf meiner Portfolio-Seite oder lerne mehr über Angular.',
    'angular.actions.backHome': 'Zur Startseite',
    'angular.actions.learnMore': 'Mehr über Angular',

    // Detailed Code Examples
    'angular.sections.detailedExamples': 'Detaillierte Code-Beispiele',
    'angular.sections.detailedExamplesDesc': 'Praktische Implementierungen moderner Angular v20 Patterns',
    'angular.codeExamples.signals.title': 'Signals API',
    'angular.codeExamples.signals.subtitle': 'Reaktives State Management',
    'angular.codeExamples.signals.description': 'Signals bieten eine einfache und performante API für reaktiven State. Mit signal(), computed() und effect() können komplexe Datenflüsse elegant umgesetzt werden.',
    'angular.codeExamples.component.title': 'Moderne Komponente',
    'angular.codeExamples.component.subtitle': 'input(), output() & model()',
    'angular.codeExamples.component.description': 'Neue Signal-basierte APIs für Component Inputs, Outputs und Two-Way Binding ersetzen Property/Event Decorators.',
    'angular.codeExamples.controlFlow.title': 'Control Flow Syntax',
    'angular.codeExamples.controlFlow.subtitle': '@if, @for, @switch',
    'angular.codeExamples.controlFlow.description': 'Native Template Syntax für Bedingungen und Schleifen - performanter und intuitiver als strukturelle Direktiven.',
    'angular.codeExamples.service.title': 'Service mit Signals',
    'angular.codeExamples.service.subtitle': 'State Management Pattern',
    'angular.codeExamples.service.description': 'Services nutzen Signals für State Management mit readonly exposed State und privaten Mutationen.',
    'angular.codeExamples.routing.title': 'Lazy Loading Routing',
    'angular.codeExamples.routing.subtitle': 'loadComponent & loadChildren',
    'angular.codeExamples.routing.description': 'Standalone Components ermöglichen einfaches Lazy Loading ohne NgModules.',
    'angular.codeExamples.forms.title': 'Reactive Forms',
    'angular.codeExamples.forms.subtitle': 'FormControl mit Signals',
    'angular.codeExamples.forms.description': 'Reactive Forms mit toSignal() für optimale Integration von RxJS und Signals.',
    'angular.codeExamples.rxjs.title': 'RxJS Interop',
    'angular.codeExamples.rxjs.subtitle': 'toSignal & toObservable',
    'angular.codeExamples.rxjs.description': 'Nahtlose Integration zwischen Signals und Observables mit den Interop-Funktionen.',
    'angular.codeExamples.guards.title': 'Functional Guards',
    'angular.codeExamples.guards.subtitle': 'Route Protection',
    'angular.codeExamples.guards.description': 'Moderne Guards als Funktionen statt Klassen - einfacher und testbarer.',
    'angular.codeExamples.pipes.title': 'Custom Pipes',
    'angular.codeExamples.pipes.subtitle': 'Transform & Pure',
    'angular.codeExamples.pipes.description': 'Pure Pipes für effiziente Datentransformation mit automatischem Caching.',
    'angular.codeExamples.interceptor.title': 'HTTP Interceptor',
    'angular.codeExamples.interceptor.subtitle': 'Functional Interceptors',
    'angular.codeExamples.interceptor.description': 'Moderne funktionale Interceptors mit inject() für Auth und Error Handling.',
    'angular.codeExamples.directive.title': 'Custom Directive',
    'angular.codeExamples.directive.subtitle': 'Signal-basiert',
    'angular.codeExamples.directive.description': 'Directives mit Signal Inputs und Host Bindings ohne Decorators.',
    'angular.codeExamples.deferrable.title': 'Deferrable Views',
    'angular.codeExamples.deferrable.subtitle': '@defer Syntax',
    'angular.codeExamples.deferrable.description': 'Lazy Loading von Templates mit @defer, @placeholder und @loading Blöcken.',
    'angular.codeExamples.viewChild.title': 'View Queries',
    'angular.codeExamples.viewChild.subtitle': 'viewChild & viewChildren',
    'angular.codeExamples.viewChild.description': 'Signal-basierte View Queries für type-safe Component und Element Zugriff.',
    'angular.codeExamples.hostBinding.title': 'Host Bindings',
    'angular.codeExamples.hostBinding.subtitle': 'Component Host',
    'angular.codeExamples.hostBinding.description': 'Deklarative Host Bindings für Class, Style, Attribute und Events im host object.',
    'angular.codeExamples.contentChild.title': 'Content Projection',
    'angular.codeExamples.contentChild.subtitle': 'contentChild Queries',
    'angular.codeExamples.contentChild.description': 'Content Queries mit contentChild und contentChildren für ng-content Zugriff.',
    'angular.codeExamples.testing.title': 'Component Testing',
    'angular.codeExamples.testing.subtitle': 'Jasmine & TestBed',
    'angular.codeExamples.testing.description': 'Unit Tests für Signals, computed Values und Component Interaktionen.',
    'angular.codeExamples.resource.title': 'Resource API',
    'angular.codeExamples.resource.subtitle': 'Deklarative HTTP-Anfragen',
    'angular.codeExamples.resource.description': 'Experimentelle Resource API für automatisches Loading, Error und Data State Management.',
    'angular.codeExamples.animations.title': 'Animationen',
    'angular.codeExamples.animations.subtitle': 'Angular Animations',
    'angular.codeExamples.animations.description': 'Deklarative Animationen mit Triggers, States, Transitions und komplexen Sequenzen.',
    'angular.codeExamples.stateManagement.title': 'State Management',
    'angular.codeExamples.stateManagement.subtitle': 'Zentraler App Store',
    'angular.codeExamples.stateManagement.description': 'Signal-basierter zentraler Store mit computed State und Actions für globales State Management.',
    'angular.codeExamples.httpSignals.title': 'HTTP mit Signals',
    'angular.codeExamples.httpSignals.subtitle': 'toSignal & toObservable',
    'angular.codeExamples.httpSignals.description': 'Reaktive HTTP-Kommunikation mit toSignal für Observable-zu-Signal Konvertierung.',
    'angular.codeExamples.performance.title': 'Performance Optimierung',
    'angular.codeExamples.performance.subtitle': 'OnPush & TrackBy',
    'angular.codeExamples.performance.description': 'Best Practices für optimale Performance: OnPush, TrackBy, Virtual Scrolling und Lazy Loading.',

    // Advanced Topics
    'angular.advanced.routing.title': 'Routing & Navigation',
    'angular.advanced.routing.description': 'Leistungsstarkes Routing-System mit Guards, Resolver und Lazy Loading',
    'angular.advanced.routing.topic1': 'Functional Route Guards (canActivate, canDeactivate)',
    'angular.advanced.routing.topic2': 'Route Resolver für Data Preloading',
    'angular.advanced.routing.topic3': 'Lazy Loading mit loadComponent() und loadChildren()',
    'angular.advanced.routing.topic4': 'Child Routes und verschachtelte Layouts',
    'angular.advanced.routing.topic5': 'Route Parameters und Query Parameters',
    'angular.advanced.routing.topic6': 'Preloading Strategies für optimale Performance',
    'angular.advanced.forms.title': 'Reactive Forms',
    'angular.advanced.forms.description': 'Typsichere Formularverarbeitung mit Validierung und dynamischen Controls',
    'angular.advanced.forms.topic1': 'Typed Reactive Forms mit FormControl<T>',
    'angular.advanced.forms.topic2': 'Custom Validators (sync & async)',
    'angular.advanced.forms.topic3': 'Dynamic Forms mit FormBuilder und FormArray',
    'angular.advanced.forms.topic4': 'Form State Management mit valueChanges und statusChanges',
    'angular.advanced.forms.topic5': 'Custom Form Controls mit ControlValueAccessor',
    'angular.advanced.forms.topic6': 'Form Validation Error Handling und Display',
    'angular.advanced.rxjs.title': 'RxJS Patterns & Operators',
    'angular.advanced.rxjs.description': 'Reaktive Programmierung mit Observables, Subjects und Operators',
    'angular.advanced.rxjs.topic1': 'toSignal() und toObservable() für Signal/Observable Interop',
    'angular.advanced.rxjs.topic2': 'Higher-Order Operators (switchMap, mergeMap, concatMap)',
    'angular.advanced.rxjs.topic3': 'Error Handling mit catchError und retry',
    'angular.advanced.rxjs.topic4': 'Multicasting mit Subject, BehaviorSubject, ReplaySubject',
    'angular.advanced.rxjs.topic5': 'Combination Operators (combineLatest, forkJoin, zip)',
    'angular.advanced.rxjs.topic6': 'Memory Leak Prevention und Unsubscribe Patterns',
    'angular.advanced.changeDetection.title': 'Change Detection Deep Dive',
    'angular.advanced.changeDetection.description': 'Optimierung der Change Detection für maximale Performance',
    'angular.advanced.changeDetection.topic1': 'Default vs OnPush Change Detection Strategies',
    'angular.advanced.changeDetection.topic2': 'Zone.js und NgZone für asynchrone Updates',
    'angular.advanced.changeDetection.topic3': 'Manual Change Detection mit ChangeDetectorRef',
    'angular.advanced.changeDetection.topic4': 'Signals und Zone-less Change Detection',
    'angular.advanced.changeDetection.topic5': 'Performance Profiling mit Angular DevTools',
    'angular.advanced.animations.title': 'Animations API',
    'angular.advanced.animations.description': 'Deklarative Animationen mit Angular Animations',
    'angular.advanced.animations.topic1': 'State-based Animations mit trigger, state, transition',
    'angular.advanced.animations.topic2': 'Enter/Leave Animations für @if und @for',
    'angular.advanced.animations.topic3': 'Keyframe Animations und Animation Curves',
    'angular.advanced.animations.topic4': 'Animation Callbacks und Events',
    'angular.advanced.animations.topic5': 'Reusable Animation Functions',
    'angular.advanced.testing.title': 'Testing Strategies',
    'angular.advanced.testing.description': 'Umfassendes Testing mit Jasmine, Karma und Playwright',
    'angular.advanced.testing.topic1': 'Component Testing mit TestBed und ComponentFixture',
    'angular.advanced.testing.topic2': 'Signal Testing mit TestBed.inject() und runInInjectionContext',
    'angular.advanced.testing.topic3': 'Service Mocking und Spy Pattern',
    'angular.advanced.testing.topic4': 'HttpClientTestingModule für HTTP Testing',
    'angular.advanced.testing.topic5': 'E2E Testing mit Playwright oder Cypress',
    'angular.advanced.testing.topic6': 'Code Coverage und Test Reporting',
    'angular.advanced.ssr.title': 'Server-Side Rendering & Hydration',
    'angular.advanced.ssr.description': 'SSR für bessere Performance, SEO und Core Web Vitals',
    'angular.advanced.ssr.topic1': 'Angular Universal Setup und Configuration',
    'angular.advanced.ssr.topic2': 'Non-destructive Hydration für nahtlose Client-Übernahme',
    'angular.advanced.ssr.topic3': 'Static Site Generation (SSG) mit Prerendering',
    'angular.advanced.ssr.topic4': '@defer für Progressive Hydration',
    'angular.advanced.ssr.topic5': 'Transfer State für Server-zu-Client Datentransfer',
    'angular.advanced.ssr.topic6': 'Platform-specific Code mit isPlatformBrowser/Server',
    'angular.advanced.i18n.title': 'Internationalisierung (i18n)',
    'angular.advanced.i18n.description': 'Multi-Language Support und Lokalisierung',
    'angular.advanced.i18n.topic1': 'Custom Translation Service mit Signal-basierten Übersetzungen',
    'angular.advanced.i18n.topic2': '@angular/localize für Build-Time Translation',
    'angular.advanced.i18n.topic3': 'ICU Message Format für Plurals und Select',
    'angular.advanced.i18n.topic4': 'Runtime Language Switching',
    'angular.advanced.i18n.topic5': 'Date, Number, Currency Pipes mit Locale',
    'angular.advanced.security.title': 'Security Best Practices',
    'angular.advanced.security.description': 'Eingebaute Sicherheitsfunktionen und Best Practices',
    'angular.advanced.security.topic1': 'DomSanitizer für XSS-Schutz bei dynamischem HTML',
    'angular.advanced.security.topic2': 'CSRF Protection mit HttpClient',
    'angular.advanced.security.topic3': 'Content Security Policy (CSP) Configuration',
    'angular.advanced.security.topic4': 'Trusted Types API Support',
    'angular.advanced.security.topic5': 'Secure Authentication mit JWT und HTTP Interceptors',
    'angular.advanced.security.topic6': 'HTTPS Enforcement und Secure Cookies',
    'angular.advanced.directives.title': 'Advanced Directives',
    'angular.advanced.directives.description': 'Strukturelle und Attribut-Directives für erweiterte Templates',
    'angular.advanced.directives.topic1': 'Custom Structural Directives mit ng-template',
    'angular.advanced.directives.topic2': 'Attribute Directives mit Signal Inputs',
    'angular.advanced.directives.topic3': 'Host Bindings und Host Listeners im host object',
    'angular.advanced.directives.topic4': 'Directive Composition API',
    'angular.advanced.directives.topic5': 'Renderer2 für platform-safe DOM Manipulation',
    'angular.advanced.pipes.title': 'Custom Pipes',
    'angular.advanced.pipes.description': 'Pure und Impure Pipes für Datentransformation',
    'angular.advanced.pipes.topic1': 'Pure Pipes mit automatischem Caching',
    'angular.advanced.pipes.topic2': 'Impure Pipes für dynamic Data',
    'angular.advanced.pipes.topic3': 'Async Pipe für Observable/Promise Handling',
    'angular.advanced.pipes.topic4': 'Parameterized Pipes',
    'angular.advanced.pipes.topic5': 'Performance Considerations und Best Practices',
    'angular.advanced.httpInterceptors.title': 'HTTP Interceptors',
    'angular.advanced.httpInterceptors.description': 'Request/Response Interception für Auth, Logging und Error Handling',
    'angular.advanced.httpInterceptors.topic1': 'Functional Interceptors mit HttpInterceptorFn',
    'angular.advanced.httpInterceptors.topic2': 'Authentication Interceptor für JWT Tokens',
    'angular.advanced.httpInterceptors.topic3': 'Error Handling und Retry Logic',
    'angular.advanced.httpInterceptors.topic4': 'Request/Response Logging',
    'angular.advanced.httpInterceptors.topic5': 'Multiple Interceptors und Execution Order',
    'angular.advanced.stateManagement.title': 'State Management Patterns',
    'angular.advanced.stateManagement.description': 'Verschiedene Ansätze für Application State Management',
    'angular.advanced.stateManagement.topic1': 'Signal-based State Management mit Services',
    'angular.advanced.stateManagement.topic2': 'NgRx Store für komplexes State Management',
    'angular.advanced.stateManagement.topic3': 'NGRX Signal Store (neue Signal-basierte API)',
    'angular.advanced.stateManagement.topic4': 'Component Store für lokalen Feature State',
    'angular.advanced.stateManagement.topic5': 'RxJS-based State Management mit BehaviorSubject',
    'angular.advanced.moduleFederation.title': 'Module Federation',
    'angular.advanced.moduleFederation.description': 'Micro-Frontend Architektur mit Webpack Module Federation',
    'angular.advanced.moduleFederation.topic1': 'Module Federation Setup mit @angular-architects/module-federation',
    'angular.advanced.moduleFederation.topic2': 'Remote Module Loading zur Laufzeit',
    'angular.advanced.moduleFederation.topic3': 'Shared Dependencies Management',
    'angular.advanced.moduleFederation.topic4': 'Micro-Frontend Communication Patterns',
    'angular.advanced.pwa.title': 'Progressive Web Apps (PWA)',
    'angular.advanced.pwa.description': 'App-ähnliche Erfahrung mit Service Workers und Offline Support',
    'angular.advanced.pwa.topic1': '@angular/pwa Setup und Configuration',
    'angular.advanced.pwa.topic2': 'Service Worker Caching Strategies',
    'angular.advanced.pwa.topic3': 'Offline Support und Background Sync',
    'angular.advanced.pwa.topic4': 'Push Notifications',
    'angular.advanced.pwa.topic5': 'App Manifest und Install Prompts',
    'angular.architecture.smartDumb.title': 'Smart & Dumb Components',
    'angular.architecture.smartDumb.description': 'Trennung von Container- (smart) und Präsentations-Komponenten (dumb) für bessere Wartbarkeit',
    'angular.architecture.facade.title': 'Facade Pattern',
    'angular.architecture.facade.description': 'Vereinfachte API für komplexe State-Management-Logik',
    'angular.architecture.module.title': 'Feature Module',
    'angular.architecture.module.description': 'Organisierung von Features in wiederverwendbare Module',
    'angular.architecture.lazy.title': 'Lazy Loading',
    'angular.architecture.lazy.description': 'On-Demand-Laden von Features für schnellere Initial Loads',
    'angular.architecture.repository.title': 'Repository Pattern',
    'angular.architecture.repository.description': 'Zentrale Datenzugriffs-Schicht für API-Kommunikation und Caching',
    'angular.architecture.observer.title': 'Observer Pattern',
    'angular.architecture.observer.description': 'Event-basierte Kommunikation mit RxJS Observables und Subjects',
    'angular.architecture.singleton.title': 'Singleton Pattern',
    'angular.architecture.singleton.description': 'Shared Services mit providedIn: "root" für app-weiten State',
    'angular.architecture.decorator.title': 'Decorator Pattern',
    'angular.architecture.decorator.description': 'Erweiterung von Funktionalität mit @Component, @Injectable und Custom Decorators',
    'angular.architecture.strategy.title': 'Strategy Pattern',
    'angular.architecture.strategy.description': 'Austauschbare Algorithmen mit Change Detection Strategies und Guards',
    'angular.architecture.adapter.title': 'Adapter Pattern',
    'angular.architecture.adapter.description': 'Transformation externer APIs in interne Interfaces mit Services',
    'angular.architecture.featureSlice.title': 'Feature-Slice Architecture',
    'angular.architecture.featureSlice.description': 'Organisation nach Features statt Typen - jedes Feature enthält Components, Services, State',
    'angular.architecture.cleanArchitecture.title': 'Clean Architecture',
    'angular.architecture.cleanArchitecture.description': 'Trennung in Layers: Presentation, Domain, Data - Abhängigkeiten zeigen nach innen',
    'angular.architecture.cqrs.title': 'CQRS Pattern',
    'angular.architecture.cqrs.description': 'Command Query Responsibility Segregation - Trennung von Read und Write Operations',
    'angular.architecture.eventDriven.title': 'Event-Driven Architecture',
    'angular.architecture.eventDriven.description': 'Lose gekoppelte Komponenten kommunizieren über Events und Observables',
    'angular.architecture.microFrontends.title': 'Micro Frontends',
    'angular.architecture.microFrontends.description': 'Modulare Frontend-Architektur mit Module Federation und unabhängigen Teams',
    'angular.architecture.ddd.title': 'Domain-Driven Design',
    'angular.architecture.ddd.description': 'Modellierung komplexer Business-Logik mit Aggregates, Entities und Value Objects',
    'angular.architecture.hexagonal.title': 'Hexagonal Architecture',
    'angular.architecture.hexagonal.description': 'Ports & Adapters Pattern - Core Business Logic isoliert von externer Infrastruktur',
    'angular.architecture.stateManagement.title': 'Centralized State Management',
    'angular.architecture.stateManagement.description': 'Zentraler App-State mit Signal Store, NgRx oder Akita für vorhersagbaren Datenaustausch',
    'angular.architecture.onion.title': 'Onion Architecture',
    'angular.architecture.onion.description': 'Schichten-Architektur mit Domain Core im Zentrum, umgeben von Application und Infrastructure',
    'angular.architecture.mvvm.title': 'MVVM Pattern',
    'angular.architecture.mvvm.description': 'Model-View-ViewModel Pattern mit Reactive Forms und Data Binding als ViewModel-Layer',
    'angular.tools.cli.title': 'Angular CLI',
    'angular.tools.cli.description': 'Command Line Interface für schnelle Entwicklung',
    'angular.tools.devtools.title': 'Angular DevTools',
    'angular.tools.devtools.description': 'Browser-Extension für Debugging und Profiling',
    'angular.tools.devtools.feature1': 'Component Tree Inspector',
    'angular.tools.devtools.feature2': 'Dependency Injection Visualizer',
    'angular.tools.devtools.feature3': 'Performance Profiler',
    'angular.tools.devtools.feature4': 'Change Detection Debugger',
    'angular.tools.build.title': 'Build System',
    'angular.tools.build.description': 'Modernes Build-System mit Vite und ESBuild',
    'angular.tools.build.feature1': 'Extrem schnelle Build-Zeiten',
    'angular.tools.build.feature2': 'Hot Module Replacement (HMR)',
    'angular.tools.build.feature3': 'Optimierte Production Builds',
    'angular.tools.build.feature4': 'Source Maps Support',

    // Real-World Patterns
    'angular.realWorldPatterns.errorBoundary.title': 'Error Boundary Pattern',
    'angular.realWorldPatterns.errorBoundary.description': 'Graceful Error Handling mit zentralisierten Fehlerbehandlungskomponenten',
    'angular.realWorldPatterns.errorBoundary.useCase1': 'Fehler in Child-Components abfangen',
    'angular.realWorldPatterns.errorBoundary.useCase2': 'User-freundliche Fehlermeldungen anzeigen',
    'angular.realWorldPatterns.errorBoundary.useCase3': 'Retry-Mechanismen implementieren',
    'angular.realWorldPatterns.errorBoundary.useCase4': 'Fehler zentral loggen und tracken',
    'angular.realWorldPatterns.loadingState.title': 'Loading State Pattern',
    'angular.realWorldPatterns.loadingState.description': 'Einheitliche Verwaltung von Loading-, Error- und Empty-States',
    'angular.realWorldPatterns.loadingState.useCase1': 'Globaler Loading-Indikator',
    'angular.realWorldPatterns.loadingState.useCase2': 'Skelett-Bildschirme für bessere UX',
    'angular.realWorldPatterns.loadingState.useCase3': 'Gleichzeitige Requests koordinieren',
    'angular.realWorldPatterns.loadingState.useCase4': 'Empty States elegant darstellen',
    'angular.realWorldPatterns.retryLogic.title': 'Retry Logic Pattern',
    'angular.realWorldPatterns.retryLogic.description': 'Intelligente Retry-Strategien mit exponential backoff',
    'angular.realWorldPatterns.retryLogic.useCase1': 'Netzwerkfehler automatisch wiederholen',
    'angular.realWorldPatterns.retryLogic.useCase2': 'Rate-Limiting umgehen',
    'angular.realWorldPatterns.retryLogic.useCase3': 'Temporäre Server-Fehler behandeln',
    'angular.realWorldPatterns.retryLogic.useCase4': 'Progressive Backoff-Strategien',
    'angular.realWorldPatterns.optimisticUpdates.title': 'Optimistic Updates',
    'angular.realWorldPatterns.optimisticUpdates.description': 'Sofortige UI-Updates mit Rollback bei Fehlern',
    'angular.realWorldPatterns.optimisticUpdates.useCase1': 'Like/Unlike Features',
    'angular.realWorldPatterns.optimisticUpdates.useCase2': 'Todo-Listen Updates',
    'angular.realWorldPatterns.optimisticUpdates.useCase3': 'Formular-Submissions',
    'angular.realWorldPatterns.optimisticUpdates.useCase4': 'Shopping Cart Updates',
    'angular.realWorldPatterns.polling.title': 'Polling Pattern',
    'angular.realWorldPatterns.polling.description': 'Periodische Server-Abfragen für Echtzeit-ähnliche Updates',
    'angular.realWorldPatterns.polling.useCase1': 'Job-Status überwachen',
    'angular.realWorldPatterns.polling.useCase2': 'Dashboard-Daten aktualisieren',
    'angular.realWorldPatterns.polling.useCase3': 'Benachrichtigungen abrufen',
    'angular.realWorldPatterns.polling.useCase4': 'Live-Scores und Preise',
    'angular.realWorldPatterns.websocket.title': 'WebSocket Integration',
    'angular.realWorldPatterns.websocket.description': 'Bidirektionale Echtzeit-Kommunikation mit automatischem Reconnect',
    'angular.realWorldPatterns.websocket.useCase1': 'Chat-Anwendungen',
    'angular.realWorldPatterns.websocket.useCase2': 'Live-Collaboration',
    'angular.realWorldPatterns.websocket.useCase3': 'Echtzeit-Benachrichtigungen',
    'angular.realWorldPatterns.websocket.useCase4': 'Gaming und Live-Events',

    // Development Tools
    'angular.developmentTools.schematics.title': 'Angular Schematics',
    'angular.developmentTools.schematics.description': 'Eigene Code-Generatoren für wiederholbare Projektstrukturen',
    'angular.developmentTools.eslint.title': 'ESLint Konfiguration',
    'angular.developmentTools.eslint.description': 'Code-Qualität mit modernem ESLint 9+ Setup sicherstellen',
    'angular.developmentTools.prettier.title': 'Prettier Code Formatter',
    'angular.developmentTools.prettier.description': 'Konsistente Code-Formatierung im gesamten Team',
    'angular.developmentTools.husky.title': 'Husky Git Hooks',
    'angular.developmentTools.husky.description': 'Automatisierte Qualitätschecks vor Commits und Pushes',
    'angular.developmentTools.conventionalCommits.title': 'Conventional Commits',
    'angular.developmentTools.conventionalCommits.description': 'Standardisierte Commit-Messages für bessere Historie',

    // Deployment Strategies
    'angular.deploymentStrategies.docker.title': 'Docker Container Setup',
    'angular.deploymentStrategies.docker.description': 'Multi-stage Docker Builds für optimierte Production Images',
    'angular.deploymentStrategies.docker.step1': 'Multi-stage Dockerfile erstellen',
    'angular.deploymentStrategies.docker.step2': 'Nginx als Production Server konfigurieren',
    'angular.deploymentStrategies.docker.step3': 'Docker Compose für lokale Entwicklung',
    'angular.deploymentStrategies.docker.step4': 'Health Checks implementieren',
    'angular.deploymentStrategies.docker.step5': 'Image-Größe optimieren',
    'angular.deploymentStrategies.cicd.title': 'CI/CD Pipelines',
    'angular.deploymentStrategies.cicd.description': 'Automatisierte Builds und Deployments mit GitHub Actions und GitLab CI',
    'angular.deploymentStrategies.cicd.step1': 'Workflow-Datei erstellen',
    'angular.deploymentStrategies.cicd.step2': 'Lint, Test und Build Jobs konfigurieren',
    'angular.deploymentStrategies.cicd.step3': 'Deployment-Pipeline einrichten',
    'angular.deploymentStrategies.cicd.step4': 'Environment-spezifische Deployments',
    'angular.deploymentStrategies.cicd.step5': 'Rollback-Strategien implementieren',
    'angular.deploymentStrategies.envVariables.title': 'Environment Variables',
    'angular.deploymentStrategies.envVariables.description': 'Sichere Verwaltung von Konfiguration über Environments',
    'angular.deploymentStrategies.envVariables.step1': 'Environment-Dateien strukturieren',
    'angular.deploymentStrategies.envVariables.step2': 'Runtime-Konfiguration laden',
    'angular.deploymentStrategies.envVariables.step3': 'Docker Environment Variables',
    'angular.deploymentStrategies.envVariables.step4': 'Secrets Management',
    'angular.deploymentStrategies.featureFlags.title': 'Feature Flags',
    'angular.deploymentStrategies.featureFlags.description': 'Dynamische Feature-Steuerung ohne Redeploy',
    'angular.deploymentStrategies.featureFlags.step1': 'Feature Flag Service implementieren',
    'angular.deploymentStrategies.featureFlags.step2': 'Feature Flag Directive erstellen',
    'angular.deploymentStrategies.featureFlags.step3': 'Remote Config Integration',
    'angular.deploymentStrategies.featureFlags.step4': 'A/B Testing Setup',
    'angular.deploymentStrategies.monitoring.title': 'Monitoring & Analytics',
    'angular.deploymentStrategies.monitoring.description': 'Error Tracking, Performance Monitoring und User Analytics',
    'angular.deploymentStrategies.monitoring.step1': 'Sentry Error Tracking integrieren',
    'angular.deploymentStrategies.monitoring.step2': 'Google Analytics 4 Setup',
    'angular.deploymentStrategies.monitoring.step3': 'Performance Metriken erfassen',
    'angular.deploymentStrategies.monitoring.step4': 'Custom Logging Service',
    'angular.deploymentStrategies.monitoring.step5': 'Real User Monitoring (RUM)',

    // Accessibility Patterns
    'angular.accessibility.ariaLabels.title': 'ARIA Labels & Attributes',
    'angular.accessibility.ariaLabels.description': 'Semantische Beschriftung für assistive Technologien',
    'angular.accessibility.ariaLabels.tip1': 'Immer aria-label für Icon-Buttons verwenden',
    'angular.accessibility.ariaLabels.tip2': 'aria-describedby für zusätzliche Kontextinformationen',
    'angular.accessibility.ariaLabels.tip3': 'aria-live für dynamische Content-Updates',
    'angular.accessibility.ariaLabels.tip4': 'aria-expanded für Accordions und Dropdowns',
    'angular.accessibility.keyboardNav.title': 'Tastatur-Navigation',
    'angular.accessibility.keyboardNav.description': 'Vollständige Bedienbarkeit ohne Maus',
    'angular.accessibility.keyboardNav.tip1': 'Tab-Navigation für alle interaktiven Elemente',
    'angular.accessibility.keyboardNav.tip2': 'Pfeiltasten für Listen und Menüs',
    'angular.accessibility.keyboardNav.tip3': 'Enter/Space für Buttons und Links',
    'angular.accessibility.keyboardNav.tip4': 'Escape zum Schließen von Modals',
    'angular.accessibility.keyboardNav.tip5': 'Sichtbare Focus-Indikatoren',
    'angular.accessibility.focusManagement.title': 'Focus Management',
    'angular.accessibility.focusManagement.description': 'Intelligente Fokus-Steuerung für bessere UX',
    'angular.accessibility.focusManagement.tip1': 'Focus Trap in Modals implementieren',
    'angular.accessibility.focusManagement.tip2': 'Auto-Focus auf ersten Input in Formularen',
    'angular.accessibility.focusManagement.tip3': 'Focus nach Modal-Schließen wiederherstellen',
    'angular.accessibility.focusManagement.tip4': 'Skip-Links für schnelle Navigation',
    'angular.accessibility.screenReader.title': 'Screen Reader Support',
    'angular.accessibility.screenReader.description': 'Optimale Unterstützung für Bildschirmleseprogramme',
    'angular.accessibility.screenReader.tip1': 'Live Regions für Status-Updates',
    'angular.accessibility.screenReader.tip2': 'Screen-Reader-Only Klasse für visuelle Versteckte',
    'angular.accessibility.screenReader.tip3': 'Semantisches HTML verwenden',
    'angular.accessibility.screenReader.tip4': 'Alt-Texte für alle Bilder',
    'angular.accessibility.screenReader.tip5': 'Korrekte Heading-Hierarchie',

    // Common Pitfalls
    'angular.pitfalls.memoryLeaks.title': 'Memory Leaks vermeiden',
    'angular.pitfalls.memoryLeaks.description': 'Subscriptions und Event Listener korrekt aufräumen',
    'angular.pitfalls.changeDetection.title': 'Change Detection Probleme',
    'angular.pitfalls.changeDetection.description': 'Immutable Updates und OnPush korrekt verwenden',
    'angular.pitfalls.zoneJs.title': 'Zone.js Performance-Probleme',
    'angular.pitfalls.zoneJs.description': 'Unnötige Change Detection Durchläufe vermeiden',
    'angular.pitfalls.antiPatterns.title': 'Anti-Patterns',
    'angular.pitfalls.antiPatterns.description': 'Häufige Fehler in der Angular-Architektur',

    // Resources
    'angular.resources.official.title': 'Offizielle Dokumentation',
    'angular.resources.official.description': 'Angular.dev, GitHub Repository und offizielle Ressourcen',
    'angular.resources.community.title': 'Community & Support',
    'angular.resources.community.description': 'Discord, Reddit, Stack Overflow und Meetups',
    'angular.resources.learning.title': 'Online Kurse',
    'angular.resources.learning.description': 'Hochwertige Lernplattformen für Angular',
    'angular.resources.youtube.title': 'YouTube Channels',
    'angular.resources.youtube.description': 'Tutorials, Updates und Best Practices',
    'angular.resources.blogs.title': 'Blogs & Artikel',
    'angular.resources.blogs.description': 'Technische Deep-Dives und News',
    'angular.resources.tools.title': 'Entwickler-Tools',
    'angular.resources.tools.description': 'DevTools, Playgrounds und Dokumentations-Tools',
    'angular.resources.libraries.title': 'UI Libraries',
    'angular.resources.libraries.description': 'Component Libraries und State Management',
    'angular.resources.newsletters.title': 'Newsletters',
    'angular.resources.newsletters.description': 'Wöchentliche Updates und Neuigkeiten',

    // Crypto Detail Modal
    'crypto.detail.loading': 'Lade Details...',
    'crypto.detail.loadingSubtitle': 'Detaillierte Informationen werden geladen',
    'crypto.detail.error.title': 'Fehler beim Laden',
    'crypto.detail.error.retry': 'Erneut versuchen',
    'crypto.detail.close': 'Schließen',
    'crypto.detail.rank': 'Marktplatz',
    'crypto.detail.currentPrice': 'Aktueller Preis',
    'crypto.detail.marketStats': 'Marktstatistiken',
    'crypto.detail.marketCap': 'Marktkapitalisierung',
    'crypto.detail.volume24h': '24h Volumen',
    'crypto.detail.high24h': '24h Hoch',
    'crypto.detail.low24h': '24h Tief',
    'crypto.detail.supply': 'Versorgung',
    'crypto.detail.circulatingSupply': 'Umlaufende Versorgung',
    'crypto.detail.totalSupply': 'Gesamtversorgung',
    'crypto.detail.maxSupply': 'Maximale Versorgung',
    'crypto.detail.records': 'Rekorde',
    'crypto.detail.allTimeHigh': 'Allzeithoch',
    'crypto.detail.allTimeLow': 'Allzeittief',
    'crypto.detail.about': 'Über',
    'crypto.detail.links': 'Links',
    'crypto.detail.website': 'Website',

    // Footer
    'footer.copyright': '2025 Mike Diethelm. Built with Angular 20.',
    'footer.github.title': 'GitHub Profile',
    'footer.linkedin.title': 'LinkedIn Profile',
    'footer.techstack': 'Angular • Material Design 3 • TypeScript'
};
