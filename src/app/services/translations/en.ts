import { Translations } from '../translation.service';

export const EN_TRANSLATIONS: Translations = {
  // Navigation
  'nav.home': 'Home',
  'nav.weather': 'Weather',
  'nav.crypto': 'Crypto',
  'nav.angular': 'Angular',
  'nav.features': 'Features',

  // Home Component
  'home.greeting': 'Hi, I am',
  'home.subtitle': 'Fullstack Developer',
  'home.intro': 'Welcome to my portfolio site! I am a passionate developer focused on Angular and modern web technologies. Here I demonstrate my skills through various features and projects.',
  'home.linkedin': 'LinkedIn',
  'home.cta.viewPortfolio': 'View Portfolio',
  'home.cta.contact': 'Get in Touch',
  'home.stats.yearsExperience': 'Years Experience',
  'home.stats.projects': 'Projects',
  'home.stats.technologies': 'Technologies',
  'home.stats.engagement': 'Engagement',
  'home.skills.title': 'My Expertise',
  'home.skills.subtitle': 'Technologies and tools I work with daily',
  'home.skills.frontend': 'Frontend',
  'home.skills.backend': 'Backend & APIs',
  'home.skills.tools': 'Tools & DevOps',
  'home.projects.title': 'Featured Projects',
  'home.projects.subtitle': 'Explore my latest work and technical demonstrations',
  'home.projects.viewAll': 'View All Projects',
  'home.features.title': 'Feature Demonstrations',
  'home.features.weather.title': 'Weather App',
  'home.features.weather.description': 'Complete weather application with free API integration',
  'home.features.weather.button': 'View Weather',
  'home.features.crypto.title': 'Crypto Tracker',
  'home.features.crypto.description': 'Live prices and 24h changes of top cryptocurrencies',
  'home.features.crypto.button': 'View Crypto',
  'home.features.angular.title': 'Angular v20 Best Practices',
  'home.features.angular.description': 'Comprehensive summary of modern Angular development with Signals and Standalone Components',
  'home.features.angular.button': 'View Angular',
  'home.features.all.button': 'All Features',

  // Technology names
  'tech.angular': 'Angular',
  'tech.typescript': 'TypeScript',
  'tech.scss': 'SCSS',
  'tech.material': 'Material Design',
  'tech.rxjs': 'RxJS',
  'tech.restful': 'RESTful APIs',
  'tech.httpclient': 'HttpClient',
  'tech.state': 'State Management',
  'tech.node': 'Node.js',
  'tech.git': 'Git',
  'tech.vscode': 'VS Code',
  'tech.npm': 'NPM',
  'tech.webpack': 'Webpack',
  'tech.openweather': 'OpenWeather API',
  'tech.coingecko': 'CoinGecko API',
  'tech.charts': 'Charts',

  // Weather Component
  'weather.title': 'Weather Forecast',
  'weather.subtitle': 'Current weather data for your city',
  'weather.search.label': 'Enter city',
  'weather.search.placeholder': 'e.g. Berlin, Munich, Zurich...',
  'weather.search.button': 'Search',
  'weather.loading': 'Loading...',
  'weather.error': 'Error loading weather data',
  'weather.error.title': 'Error occurred',
  'weather.error.tip': 'Tip',
  'weather.error.suggestion': 'Check the spelling or try another city name',
  'weather.error.close': 'Close',
  'weather.popular.title': 'Popular Cities',
  'weather.refresh': 'Refresh',
  'weather.lastUpdated': 'Last updated',
  'weather.backToHome.button': 'Back to Home',
  'weather.backToHome.tooltip': 'Return to homepage',
  'weather.feelsLike': 'Feels like',
  'weather.minMax': 'Min/Max',
  'weather.humidity': 'Humidity',
  'weather.pressure': 'Pressure',
  'weather.wind': 'Wind',
  'weather.sunrise': 'Sunrise',
  'weather.sunset': 'Sunset',

  // Crypto Component
  'crypto.title': 'Cryptocurrencies',
  'crypto.subtitle': 'Live prices of top cryptocurrencies',
  'crypto.loading': 'Loading...',
  'crypto.refresh.button': 'Refresh',
  'crypto.refresh.tooltip': 'Reload data',
  'crypto.currency.label': 'Currency:',

  'crypto.error.title': 'Loading Error',
  'crypto.error.dismiss': 'Dismiss',
  'crypto.lastUpdate': 'Last Update',
  'crypto.dataStale': 'Data may be outdated',
  'crypto.topCurrencies': 'Top Cryptocurrencies',
  'crypto.table.rank': 'Rank',
  'crypto.table.name': 'Name',
  'crypto.table.price': 'Price',
  'crypto.table.change24h': '24h Change',
  'crypto.table.marketCap': 'Market Cap',
  'crypto.marketSize.label': 'Market Size',
  'crypto.marketSize.top100': 'Top 100 Coins',
  'crypto.marketSize.top250': 'Top 250 Coins',
  'crypto.marketSize.top500': 'Top 500 Coins',
  'crypto.marketSize.top1000': 'Top 1,000 Coins',
  'crypto.marketSize.top2500': 'Top 2,500 Coins',
  'crypto.pageSize.label': 'Coins per page',
  'crypto.pageSize.coinsPerPage': 'coins per page',
  'crypto.pagination.showing': 'Showing',
  'crypto.pagination.of': 'of',
  'crypto.pagination.previous': 'Previous page',
  'crypto.pagination.next': 'Next page',
  'crypto.empty.title': 'No data available',
  'crypto.empty.subtitle': 'Click "Load Data" to see current cryptocurrency prices.',
  'crypto.loadData': 'Load Data',
  'crypto.clickForDetails': 'Click for details',

  // Angular Summary Component
  'angular.header.title': 'Angular v20 Best Practices & Summary',
  'angular.header.subtitle': 'Modern web development with Angular 20 - Signals, Standalone Components & more',
  'angular.backToHome': 'Back to Home',
  'angular.sections.coreFeatures': 'Core Features',
  'angular.sections.bestPractices': 'Best Practices',
  'angular.sections.technologies': 'Technologies Used',
  'angular.sections.examples': 'Code Examples',
  'angular.sections.advanced': 'Advanced Topics',
  'angular.sections.architecture': 'Architecture Patterns',
  'angular.sections.tools': 'CLI & DevTools',
  'angular.features.signals.title': 'Signals',
  'angular.features.signals.description': 'Reactive state management with signal(), computed() and effect() for optimal performance',
  'angular.features.standalone.title': 'Standalone Components',
  'angular.features.standalone.description': 'Module-less architecture - components are standalone by default',
  'angular.features.inject.title': 'inject() Function',
  'angular.features.inject.description': 'Dependency injection with inject() instead of constructor injection',
  'angular.features.controlFlow.title': 'Control Flow',
  'angular.features.controlFlow.description': 'Native @if, @for, @switch syntax instead of structural directives',
  'angular.features.deferrable.title': 'Deferrable Views (@defer)',
  'angular.features.deferrable.description': 'Lazy loading of templates with @defer, @placeholder, @loading and @error blocks',
  'angular.features.inputOutput.title': 'input() & output() Functions',
  'angular.features.inputOutput.description': 'Signal-based Component Inputs and Outputs replace @Input() and @Output() decorators',
  'angular.features.viewQueries.title': 'viewChild() & viewChildren()',
  'angular.features.viewQueries.description': 'Signal-based View Queries for type-safe access to Child Components and DOM elements',
  'angular.features.model.title': 'model() for Two-Way Binding',
  'angular.features.model.description': 'Simplified Two-Way Data Binding with WritableSignal for bidirectional communication',
  'angular.features.onPush.title': 'OnPush Change Detection',
  'angular.features.onPush.description': 'Optimized performance through ChangeDetectionStrategy.OnPush',
  'angular.features.httpClient.title': 'HttpClient with Signals',
  'angular.features.httpClient.description': 'Modern HTTP communication with provideHttpClient(withFetch())',
  'angular.features.resource.title': 'Resource API (Experimental)',
  'angular.features.resource.description': 'Declarative HTTP requests with automatic loading state and error handling',
  'angular.features.typedForms.title': 'Typed Reactive Forms',
  'angular.features.typedForms.description': 'Fully typed forms with FormControl<T>, FormGroup<T> and FormArray<T>',
  'angular.features.router.title': 'Standalone Router',
  'angular.features.router.description': 'Functional routing with provideRouter(), Guards, Resolvers and Lazy Loading',
  'angular.features.material.title': 'Material Design 3',
  'angular.features.material.description': 'Angular Material Components with Material Design 3 theming and Accessibility',
  'angular.features.devtools.title': 'Angular DevTools',
  'angular.features.devtools.description': 'Browser extension for Component Inspection, Profiling and Dependency Injection debugging',
  'angular.features.vite.title': 'Vite & ESBuild',
  'angular.features.vite.description': 'Ultra-fast build times with Vite Dev Server and ESBuild for production builds',
  'angular.bestPractices.components.title': 'Components',
  'angular.bestPractices.components.item1': 'Small, focused components with single responsibility',
  'angular.bestPractices.components.item2': 'Use input() and output() functions instead of decorators',
  'angular.bestPractices.components.item3': 'Prefer inline templates for small components',
  'angular.bestPractices.components.item4': 'OnPush change detection for optimal performance',
  'angular.bestPractices.components.item5': 'Use class and style bindings instead of ngClass/ngStyle',
  'angular.bestPractices.components.item6': 'Implement lifecycle hooks (OnInit, OnDestroy, etc.)',
  'angular.bestPractices.components.item7': 'Use protected for template-only members, private for internal logic',
  'angular.bestPractices.components.item8': 'Extract complex template logic into computed() signals',
  'angular.bestPractices.state.title': 'State Management',
  'angular.bestPractices.state.item1': 'Use signals for local component state',
  'angular.bestPractices.state.item2': 'Use computed() for derived state',
  'angular.bestPractices.state.item3': 'Keep state transformations pure and predictable',
  'angular.bestPractices.state.item4': 'Use update() or set(), never mutate()',
  'angular.bestPractices.state.item5': 'Use effect() only for side effects, not state updates',
  'angular.bestPractices.state.item6': 'Use untracked() to avoid circular dependencies',
  'angular.bestPractices.templates.title': 'Templates',
  'angular.bestPractices.templates.item1': 'Use native control flow (@if, @for, @switch)',
  'angular.bestPractices.templates.item2': 'Keep templates simple, avoid complex logic',
  'angular.bestPractices.templates.item3': 'Use async pipe for observables',
  'angular.bestPractices.templates.item4': 'Use trackBy with @for for efficient list rendering',
  'angular.bestPractices.templates.item5': 'Use @defer for lazy loading heavy components',
  'angular.bestPractices.services.title': 'Services',
  'angular.bestPractices.services.item1': 'Design services around single responsibility',
  'angular.bestPractices.services.item2': 'Use providedIn: "root" for singleton services',
  'angular.bestPractices.services.item3': 'Use inject() function instead of constructor injection',
  'angular.bestPractices.services.item4': 'Expose readonly state with private signals for mutations',
  'angular.bestPractices.services.item5': 'Separate service logic from presentation logic',
  'angular.bestPractices.performance.title': 'Performance',
  'angular.bestPractices.performance.item1': 'Consistently use OnPush change detection',
  'angular.bestPractices.performance.item2': 'Implement lazy loading for feature routes',
  'angular.bestPractices.performance.item3': 'Use NgOptimizedImage for static images',
  'angular.bestPractices.performance.item4': 'Use trackBy with @for for optimal rendering',
  'angular.bestPractices.performance.item5': 'Use @defer for on-demand component loading',
  'angular.bestPractices.performance.item6': 'Prefer pure pipes (default), impure only when necessary',
  'angular.bestPractices.performance.item7': 'Use Web Workers for CPU-intensive computations',
  'angular.bestPractices.typescript.title': 'TypeScript',
  'angular.bestPractices.typescript.item1': 'Strict type checking enabled',
  'angular.bestPractices.typescript.item2': 'Use type inference when obvious',
  'angular.bestPractices.typescript.item3': 'Avoid any, use unknown when uncertain',
  'angular.bestPractices.typescript.item4': 'Use readonly for properties that don\'t change',
  'angular.bestPractices.typescript.item5': 'Use const for all variables that aren\'t reassigned',
  'angular.bestPractices.typescript.item6': 'Explicit return types for public API methods',
  'angular.bestPractices.accessibility.title': 'Accessibility (a11y)',
  'angular.bestPractices.accessibility.item1': 'Use semantic HTML elements',
  'angular.bestPractices.accessibility.item2': 'Add ARIA labels for dynamic content',
  'angular.bestPractices.accessibility.item3': 'Keyboard navigation for all interactive elements',
  'angular.bestPractices.accessibility.item4': 'Sufficient color contrasts (WCAG 2.1 AA)',
  'angular.bestPractices.accessibility.item5': 'Focus management for modal dialogs and routes',
  'angular.bestPractices.testing.title': 'Testing',
  'angular.bestPractices.testing.item1': 'Write unit tests for all business logic',
  'angular.bestPractices.testing.item2': 'Use TestBed for component tests with dependency injection',
  'angular.bestPractices.testing.item3': 'Test signals with TestBed.inject() and fixture.detectChanges()',
  'angular.bestPractices.testing.item4': 'Mock services for isolated component tests',
  'angular.bestPractices.testing.item5': 'E2E tests for critical user journeys (Cypress/Playwright)',
  'angular.bestPractices.errorHandling.title': 'Error Handling',
  'angular.bestPractices.errorHandling.item1': 'Implement global error handler for unexpected errors',
  'angular.bestPractices.errorHandling.item2': 'Use HTTP interceptor for centralized API error handling',
  'angular.bestPractices.errorHandling.item3': 'Use catchError() for observable error handling',
  'angular.bestPractices.errorHandling.item4': 'Display user-friendly error messages with context',
  'angular.bestPractices.security.title': 'Security',
  'angular.bestPractices.security.item1': 'Use sanitization for user input (XSS protection)',
  'angular.bestPractices.security.item2': 'Use CSRF tokens for state-changing requests',
  'angular.bestPractices.security.item3': 'Use HTTP interceptor for authorization headers',
  'angular.bestPractices.security.item4': 'Never store sensitive data in localStorage',
  'angular.bestPractices.security.item5': 'Configure Content Security Policy (CSP)',
  'angular.bestPractices.codeOrganization.title': 'Code Organization',
  'angular.bestPractices.codeOrganization.item1': 'Organize by features, not by file types',
  'angular.bestPractices.codeOrganization.item2': 'Shared/Common module for reusable components',
  'angular.bestPractices.codeOrganization.item3': 'Core module for singleton services and guards',
  'angular.bestPractices.codeOrganization.item4': 'One concept per file (component, service, etc.)',
  'angular.bestPractices.codeOrganization.item5': 'Index files (index.ts) for public API exports',
  'angular.bestPractices.dependency.title': 'Dependency Management',
  'angular.bestPractices.dependency.item1': 'Update dependencies regularly (ng update)',
  'angular.bestPractices.dependency.item2': 'Pay attention to peer dependencies and compatibility',
  'angular.bestPractices.dependency.item3': 'Monitor bundle size with source-map-explorer',
  'angular.bestPractices.dependency.item4': 'Use tree-shakeable providers (providedIn)',
  'angular.bestPractices.buildDeploy.title': 'Build & Deployment',
  'angular.bestPractices.buildDeploy.item1': 'Production build with --configuration=production',
  'angular.bestPractices.buildDeploy.item2': 'AOT compilation for better performance',
  'angular.bestPractices.buildDeploy.item3': 'Use environment-specific configurations',
  'angular.bestPractices.buildDeploy.item4': 'Enable source maps only in development',
  'angular.bestPractices.buildDeploy.item5': 'CI/CD pipeline for automated testing and deployment',
  'angular.examples.signals.title': 'Signals Example',
  'angular.examples.signals.subtitle': 'Reactive State Management',
  'angular.examples.signals.description': 'Signals provide a simple and performant way to manage reactive state.',
  'angular.examples.inject.title': 'Dependency Injection',
  'angular.examples.inject.subtitle': 'Modern DI with inject()',
  'angular.examples.inject.description': 'The inject() function enables cleaner and more readable dependency injection.',
  'angular.examples.controlFlow.title': 'Control Flow',
  'angular.examples.controlFlow.subtitle': 'Native Template Syntax',
  'angular.examples.controlFlow.description': 'Native @if, @else syntax is more intuitive and performant than *ngIf.',
  'angular.actions.title': 'Ready for more?',
  'angular.actions.description': 'Explore more features and projects on my portfolio or learn more about Angular.',
  'angular.actions.backHome': 'Back to Home',
  'angular.actions.learnMore': 'Learn More About Angular',

  // Detailed Code Examples
  'angular.sections.detailedExamples': 'Detailed Code Examples',
  'angular.sections.detailedExamplesDesc': 'Practical implementations of modern Angular v20 patterns',
  'angular.codeExamples.signals.title': 'Signals API',
  'angular.codeExamples.signals.subtitle': 'Reactive State Management',
  'angular.codeExamples.signals.description': 'Signals provide a simple and performant API for reactive state. With signal(), computed() and effect() complex data flows can be elegantly implemented.',
  'angular.codeExamples.component.title': 'Modern Component',
  'angular.codeExamples.component.subtitle': 'input(), output() & model()',
  'angular.codeExamples.component.description': 'New signal-based APIs for Component Inputs, Outputs and Two-Way Binding replace Property/Event Decorators.',
  'angular.codeExamples.controlFlow.title': 'Control Flow Syntax',
  'angular.codeExamples.controlFlow.subtitle': '@if, @for, @switch',
  'angular.codeExamples.controlFlow.description': 'Native template syntax for conditions and loops - more performant and intuitive than structural directives.',
  'angular.codeExamples.service.title': 'Service with Signals',
  'angular.codeExamples.service.subtitle': 'State Management Pattern',
  'angular.codeExamples.service.description': 'Services use Signals for state management with readonly exposed state and private mutations.',
  'angular.codeExamples.routing.title': 'Lazy Loading Routing',
  'angular.codeExamples.routing.subtitle': 'loadComponent & loadChildren',
  'angular.codeExamples.routing.description': 'Standalone Components enable simple lazy loading without NgModules.',
  'angular.codeExamples.forms.title': 'Reactive Forms',
  'angular.codeExamples.forms.subtitle': 'FormControl with Signals',
  'angular.codeExamples.forms.description': 'Reactive Forms with toSignal() for optimal integration of RxJS and Signals.',
  'angular.codeExamples.rxjs.title': 'RxJS Interop',
  'angular.codeExamples.rxjs.subtitle': 'toSignal & toObservable',
  'angular.codeExamples.rxjs.description': 'Seamless integration between Signals and Observables with the interop functions.',
  'angular.codeExamples.guards.title': 'Functional Guards',
  'angular.codeExamples.guards.subtitle': 'Route Protection',
  'angular.codeExamples.guards.description': 'Modern guards as functions instead of classes - simpler and more testable.',
  'angular.codeExamples.pipes.title': 'Custom Pipes',
  'angular.codeExamples.pipes.subtitle': 'Transform & Pure',
  'angular.codeExamples.pipes.description': 'Pure Pipes for efficient data transformation with automatic caching.',
  'angular.codeExamples.interceptor.title': 'HTTP Interceptor',
  'angular.codeExamples.interceptor.subtitle': 'Functional Interceptors',
  'angular.codeExamples.interceptor.description': 'Modern functional interceptors with inject() for auth and error handling.',
  'angular.codeExamples.directive.title': 'Custom Directive',
  'angular.codeExamples.directive.subtitle': 'Signal-based',
  'angular.codeExamples.directive.description': 'Directives with signal inputs and host bindings without decorators.',
  'angular.codeExamples.deferrable.title': 'Deferrable Views',
  'angular.codeExamples.deferrable.subtitle': '@defer Syntax',
  'angular.codeExamples.deferrable.description': 'Lazy loading of templates with @defer, @placeholder and @loading blocks.',
  'angular.codeExamples.viewChild.title': 'View Queries',
  'angular.codeExamples.viewChild.subtitle': 'viewChild & viewChildren',
  'angular.codeExamples.viewChild.description': 'Signal-based view queries for type-safe component and element access.',
  'angular.codeExamples.hostBinding.title': 'Host Bindings',
  'angular.codeExamples.hostBinding.subtitle': 'Component Host',
  'angular.codeExamples.hostBinding.description': 'Declarative host bindings for class, style, attribute and events in host object.',
  'angular.codeExamples.contentChild.title': 'Content Projection',
  'angular.codeExamples.contentChild.subtitle': 'contentChild Queries',
  'angular.codeExamples.contentChild.description': 'Content queries with contentChild and contentChildren for ng-content access.',
  'angular.codeExamples.testing.title': 'Component Testing',
  'angular.codeExamples.testing.subtitle': 'Jasmine & TestBed',
  'angular.codeExamples.testing.description': 'Unit tests for signals, computed values and component interactions.',
  'angular.codeExamples.resource.title': 'Resource API',
  'angular.codeExamples.resource.subtitle': 'Declarative HTTP Requests',
  'angular.codeExamples.resource.description': 'Experimental Resource API for automatic loading, error and data state management.',
  'angular.codeExamples.animations.title': 'Animations',
  'angular.codeExamples.animations.subtitle': 'Angular Animations',
  'angular.codeExamples.animations.description': 'Declarative animations with triggers, states, transitions and complex sequences.',
  'angular.codeExamples.stateManagement.title': 'State Management',
  'angular.codeExamples.stateManagement.subtitle': 'Central App Store',
  'angular.codeExamples.stateManagement.description': 'Signal-based central store with computed state and actions for global state management.',
  'angular.codeExamples.httpSignals.title': 'HTTP with Signals',
  'angular.codeExamples.httpSignals.subtitle': 'toSignal & toObservable',
  'angular.codeExamples.httpSignals.description': 'Reactive HTTP communication with toSignal for Observable-to-Signal conversion.',
  'angular.codeExamples.performance.title': 'Performance Optimization',
  'angular.codeExamples.performance.subtitle': 'OnPush & TrackBy',
  'angular.codeExamples.performance.description': 'Best practices for optimal performance: OnPush, TrackBy, Virtual Scrolling and Lazy Loading.',

  // Advanced Topics
  'angular.advanced.routing.title': 'Routing & Navigation',
  'angular.advanced.routing.description': 'Powerful routing system with guards, resolvers and lazy loading',
  'angular.advanced.routing.topic1': 'Functional Route Guards (canActivate, canDeactivate)',
  'angular.advanced.routing.topic2': 'Route Resolvers for data preloading',
  'angular.advanced.routing.topic3': 'Lazy Loading with loadComponent() and loadChildren()',
  'angular.advanced.routing.topic4': 'Child Routes and nested layouts',
  'angular.advanced.routing.topic5': 'Route Parameters and Query Parameters',
  'angular.advanced.routing.topic6': 'Preloading Strategies for optimal performance',
  'angular.advanced.forms.title': 'Reactive Forms',
  'angular.advanced.forms.description': 'Type-safe form handling with validation and dynamic controls',
  'angular.advanced.forms.topic1': 'Typed Reactive Forms with FormControl<T>',
  'angular.advanced.forms.topic2': 'Custom Validators (sync & async)',
  'angular.advanced.forms.topic3': 'Dynamic Forms with FormBuilder and FormArray',
  'angular.advanced.forms.topic4': 'Form State Management with valueChanges and statusChanges',
  'angular.advanced.forms.topic5': 'Custom Form Controls with ControlValueAccessor',
  'angular.advanced.forms.topic6': 'Form Validation Error Handling and Display',
  'angular.advanced.rxjs.title': 'RxJS Patterns & Operators',
  'angular.advanced.rxjs.description': 'Reactive programming with Observables, Subjects and Operators',
  'angular.advanced.rxjs.topic1': 'toSignal() and toObservable() for Signal/Observable interop',
  'angular.advanced.rxjs.topic2': 'Higher-Order Operators (switchMap, mergeMap, concatMap)',
  'angular.advanced.rxjs.topic3': 'Error Handling with catchError and retry',
  'angular.advanced.rxjs.topic4': 'Multicasting with Subject, BehaviorSubject, ReplaySubject',
  'angular.advanced.rxjs.topic5': 'Combination Operators (combineLatest, forkJoin, zip)',
  'angular.advanced.rxjs.topic6': 'Memory Leak Prevention and Unsubscribe Patterns',
  'angular.advanced.changeDetection.title': 'Change Detection Deep Dive',
  'angular.advanced.changeDetection.description': 'Optimizing Change Detection for maximum performance',
  'angular.advanced.changeDetection.topic1': 'Default vs OnPush Change Detection Strategies',
  'angular.advanced.changeDetection.topic2': 'Zone.js and NgZone for async updates',
  'angular.advanced.changeDetection.topic3': 'Manual Change Detection with ChangeDetectorRef',
  'angular.advanced.changeDetection.topic4': 'Signals and Zone-less Change Detection',
  'angular.advanced.changeDetection.topic5': 'Performance Profiling with Angular DevTools',
  'angular.advanced.animations.title': 'Animations API',
  'angular.advanced.animations.description': 'Declarative animations with Angular Animations',
  'angular.advanced.animations.topic1': 'State-based Animations with trigger, state, transition',
  'angular.advanced.animations.topic2': 'Enter/Leave Animations for @if and @for',
  'angular.advanced.animations.topic3': 'Keyframe Animations and Animation Curves',
  'angular.advanced.animations.topic4': 'Animation Callbacks and Events',
  'angular.advanced.animations.topic5': 'Reusable Animation Functions',
  'angular.advanced.testing.title': 'Testing Strategies',
  'angular.advanced.testing.description': 'Comprehensive testing with Jasmine, Karma and Playwright',
  'angular.advanced.testing.topic1': 'Component Testing with TestBed and ComponentFixture',
  'angular.advanced.testing.topic2': 'Signal Testing with TestBed.inject() and runInInjectionContext',
  'angular.advanced.testing.topic3': 'Service Mocking and Spy Pattern',
  'angular.advanced.testing.topic4': 'HttpClientTestingModule for HTTP Testing',
  'angular.advanced.testing.topic5': 'E2E Testing with Playwright or Cypress',
  'angular.advanced.testing.topic6': 'Code Coverage and Test Reporting',
  'angular.advanced.ssr.title': 'Server-Side Rendering & Hydration',
  'angular.advanced.ssr.description': 'SSR for better performance, SEO and Core Web Vitals',
  'angular.advanced.ssr.topic1': 'Angular Universal Setup and Configuration',
  'angular.advanced.ssr.topic2': 'Non-destructive Hydration for seamless client takeover',
  'angular.advanced.ssr.topic3': 'Static Site Generation (SSG) with Prerendering',
  'angular.advanced.ssr.topic4': '@defer for Progressive Hydration',
  'angular.advanced.ssr.topic5': 'Transfer State for server-to-client data transfer',
  'angular.advanced.ssr.topic6': 'Platform-specific code with isPlatformBrowser/Server',
  'angular.advanced.i18n.title': 'Internationalization (i18n)',
  'angular.advanced.i18n.description': 'Multi-language support and localization',
  'angular.advanced.i18n.topic1': 'Custom Translation Service with Signal-based translations',
  'angular.advanced.i18n.topic2': '@angular/localize for Build-Time Translation',
  'angular.advanced.i18n.topic3': 'ICU Message Format for Plurals and Select',
  'angular.advanced.i18n.topic4': 'Runtime Language Switching',
  'angular.advanced.i18n.topic5': 'Date, Number, Currency Pipes with Locale',
  'angular.advanced.security.title': 'Security Best Practices',
  'angular.advanced.security.description': 'Built-in security features and best practices',
  'angular.advanced.security.topic1': 'DomSanitizer for XSS protection with dynamic HTML',
  'angular.advanced.security.topic2': 'CSRF Protection with HttpClient',
  'angular.advanced.security.topic3': 'Content Security Policy (CSP) Configuration',
  'angular.advanced.security.topic4': 'Trusted Types API Support',
  'angular.advanced.security.topic5': 'Secure Authentication with JWT and HTTP Interceptors',
  'angular.advanced.security.topic6': 'HTTPS Enforcement and Secure Cookies',
  'angular.advanced.directives.title': 'Advanced Directives',
  'angular.advanced.directives.description': 'Structural and Attribute Directives for advanced templates',
  'angular.advanced.directives.topic1': 'Custom Structural Directives with ng-template',
  'angular.advanced.directives.topic2': 'Attribute Directives with Signal Inputs',
  'angular.advanced.directives.topic3': 'Host Bindings and Host Listeners in host object',
  'angular.advanced.directives.topic4': 'Directive Composition API',
  'angular.advanced.directives.topic5': 'Renderer2 for platform-safe DOM manipulation',
  'angular.advanced.pipes.title': 'Custom Pipes',
  'angular.advanced.pipes.description': 'Pure and Impure Pipes for data transformation',
  'angular.advanced.pipes.topic1': 'Pure Pipes with automatic caching',
  'angular.advanced.pipes.topic2': 'Impure Pipes for dynamic data',
  'angular.advanced.pipes.topic3': 'Async Pipe for Observable/Promise handling',
  'angular.advanced.pipes.topic4': 'Parameterized Pipes',
  'angular.advanced.pipes.topic5': 'Performance Considerations and Best Practices',
  'angular.advanced.httpInterceptors.title': 'HTTP Interceptors',
  'angular.advanced.httpInterceptors.description': 'Request/Response interception for auth, logging and error handling',
  'angular.advanced.httpInterceptors.topic1': 'Functional Interceptors with HttpInterceptorFn',
  'angular.advanced.httpInterceptors.topic2': 'Authentication Interceptor for JWT Tokens',
  'angular.advanced.httpInterceptors.topic3': 'Error Handling and Retry Logic',
  'angular.advanced.httpInterceptors.topic4': 'Request/Response Logging',
  'angular.advanced.httpInterceptors.topic5': 'Multiple Interceptors and Execution Order',
  'angular.advanced.stateManagement.title': 'State Management Patterns',
  'angular.advanced.stateManagement.description': 'Different approaches for application state management',
  'angular.advanced.stateManagement.topic1': 'Signal-based State Management with Services',
  'angular.advanced.stateManagement.topic2': 'NgRx Store for complex state management',
  'angular.advanced.stateManagement.topic3': 'NGRX Signal Store (new Signal-based API)',
  'angular.advanced.stateManagement.topic4': 'Component Store for local feature state',
  'angular.advanced.stateManagement.topic5': 'RxJS-based State Management with BehaviorSubject',
  'angular.advanced.moduleFederation.title': 'Module Federation',
  'angular.advanced.moduleFederation.description': 'Micro-Frontend architecture with Webpack Module Federation',
  'angular.advanced.moduleFederation.topic1': 'Module Federation Setup with @angular-architects/module-federation',
  'angular.advanced.moduleFederation.topic2': 'Remote Module Loading at runtime',
  'angular.advanced.moduleFederation.topic3': 'Shared Dependencies Management',
  'angular.advanced.moduleFederation.topic4': 'Micro-Frontend Communication Patterns',
  'angular.advanced.pwa.title': 'Progressive Web Apps (PWA)',
  'angular.advanced.pwa.description': 'App-like experience with Service Workers and Offline Support',
  'angular.advanced.pwa.topic1': '@angular/pwa Setup and Configuration',
  'angular.advanced.pwa.topic2': 'Service Worker Caching Strategies',
  'angular.advanced.pwa.topic3': 'Offline Support and Background Sync',
  'angular.advanced.pwa.topic4': 'Push Notifications',
  'angular.advanced.pwa.topic5': 'App Manifest and Install Prompts',
  'angular.architecture.smartDumb.title': 'Smart & Dumb Components',
  'angular.architecture.smartDumb.description': 'Separation of container (smart) and presentational (dumb) components for better maintainability',
  'angular.architecture.facade.title': 'Facade Pattern',
  'angular.architecture.facade.description': 'Simplified API for complex state management logic',
  'angular.architecture.module.title': 'Feature Modules',
  'angular.architecture.module.description': 'Organization of features into reusable modules',
  'angular.architecture.lazy.title': 'Lazy Loading',
  'angular.architecture.lazy.description': 'On-demand loading of features for faster initial loads',
  'angular.architecture.repository.title': 'Repository Pattern',
  'angular.architecture.repository.description': 'Centralized data access layer for API communication and caching',
  'angular.architecture.observer.title': 'Observer Pattern',
  'angular.architecture.observer.description': 'Event-based communication with RxJS Observables and Subjects',
  'angular.architecture.singleton.title': 'Singleton Pattern',
  'angular.architecture.singleton.description': 'Shared services with providedIn: "root" for app-wide state',
  'angular.architecture.decorator.title': 'Decorator Pattern',
  'angular.architecture.decorator.description': 'Extending functionality with @Component, @Injectable and custom decorators',
  'angular.architecture.strategy.title': 'Strategy Pattern',
  'angular.architecture.strategy.description': 'Interchangeable algorithms with Change Detection Strategies and Guards',
  'angular.architecture.adapter.title': 'Adapter Pattern',
  'angular.architecture.adapter.description': 'Transforming external APIs into internal interfaces with services',
  'angular.architecture.featureSlice.title': 'Feature-Slice Architecture',
  'angular.architecture.featureSlice.description': 'Organization by features instead of types - each feature contains components, services, state',
  'angular.architecture.cleanArchitecture.title': 'Clean Architecture',
  'angular.architecture.cleanArchitecture.description': 'Separation into layers: Presentation, Domain, Data - dependencies point inward',
  'angular.architecture.cqrs.title': 'CQRS Pattern',
  'angular.architecture.cqrs.description': 'Command Query Responsibility Segregation - separation of read and write operations',
  'angular.architecture.eventDriven.title': 'Event-Driven Architecture',
  'angular.architecture.eventDriven.description': 'Loosely coupled components communicate via events and observables',
  'angular.architecture.microFrontends.title': 'Micro Frontends',
  'angular.architecture.microFrontends.description': 'Modular frontend architecture with Module Federation and independent teams',
  'angular.architecture.ddd.title': 'Domain-Driven Design',
  'angular.architecture.ddd.description': 'Modeling complex business logic with Aggregates, Entities and Value Objects',
  'angular.architecture.hexagonal.title': 'Hexagonal Architecture',
  'angular.architecture.hexagonal.description': 'Ports & Adapters Pattern - core business logic isolated from external infrastructure',
  'angular.architecture.stateManagement.title': 'Centralized State Management',
  'angular.architecture.stateManagement.description': 'Central app state with Signal Store, NgRx or Akita for predictable data flow',
  'angular.architecture.onion.title': 'Onion Architecture',
  'angular.architecture.onion.description': 'Layered architecture with Domain Core at center, surrounded by Application and Infrastructure',
  'angular.architecture.mvvm.title': 'MVVM Pattern',
  'angular.architecture.mvvm.description': 'Model-View-ViewModel pattern with Reactive Forms and Data Binding as ViewModel layer',
  'angular.tools.cli.title': 'Angular CLI',
  'angular.tools.cli.description': 'Command Line Interface for rapid development',
  'angular.tools.devtools.title': 'Angular DevTools',
  'angular.tools.devtools.description': 'Browser extension for debugging and profiling',
  'angular.tools.devtools.feature1': 'Component Tree Inspector',
  'angular.tools.devtools.feature2': 'Dependency Injection Visualizer',
  'angular.tools.devtools.feature3': 'Performance Profiler',
  'angular.tools.devtools.feature4': 'Change Detection Debugger',
  'angular.tools.build.title': 'Build System',
  'angular.tools.build.description': 'Modern build system with Vite and ESBuild',
  'angular.tools.build.feature1': 'Extremely fast build times',
  'angular.tools.build.feature2': 'Hot Module Replacement (HMR)',
  'angular.tools.build.feature3': 'Optimized Production Builds',
  'angular.tools.build.feature4': 'Source Maps Support',

  // Crypto Detail Modal
  'crypto.detail.loading': 'Loading Details...',
  'crypto.detail.loadingSubtitle': 'Fetching detailed information',
  'crypto.detail.error.title': 'Loading Error',
  'crypto.detail.error.retry': 'Retry',
  'crypto.detail.close': 'Close',
  'crypto.detail.rank': 'Market Rank',
  'crypto.detail.currentPrice': 'Current Price',
  'crypto.detail.marketStats': 'Market Statistics',
  'crypto.detail.marketCap': 'Market Cap',
  'crypto.detail.volume24h': '24h Volume',
  'crypto.detail.high24h': '24h High',
  'crypto.detail.low24h': '24h Low',
  'crypto.detail.supply': 'Supply',
  'crypto.detail.circulatingSupply': 'Circulating Supply',
  'crypto.detail.totalSupply': 'Total Supply',
  'crypto.detail.maxSupply': 'Max Supply',
  'crypto.detail.records': 'Records',
  'crypto.detail.allTimeHigh': 'All-Time High',
  'crypto.detail.allTimeLow': 'All-Time Low',
  'crypto.detail.about': 'About',
  'crypto.detail.links': 'Links',
  'crypto.detail.website': 'Website',

  // Footer
  'crypto.backToHome.button': 'Back to Home',
  'crypto.backToHome.tooltip': 'Return to homepage',

  // Footer
  'footer.copyright': '2025 Mike Diethelm. Built with Angular 20.',
  'footer.github.title': 'GitHub Profile',
  'footer.linkedin.title': 'LinkedIn Profile',
  'footer.techstack': 'Angular • Material Design 3 • TypeScript'
};
