import { Translations } from '../translation.service';

export const EN_TRANSLATIONS: Translations = {
  // Navigation
  'nav.home': 'Home',
  'nav.weather': 'Weather',
  'nav.crypto': 'Crypto',
  'nav.angular': 'Angular',
  'nav.features': 'Features',

  // Home Component
  'home.greeting': 'Hi, I am',
  'home.subtitle': 'Fullstack Developer',
  'home.intro': 'Welcome to my portfolio site! I am a passionate developer focused on Angular and modern web technologies. Here I demonstrate my skills through various features and projects.',
  'home.linkedin': 'LinkedIn',
  'home.cta.viewPortfolio': 'View Portfolio',
  'home.cta.contact': 'Get in Touch',
  'home.stats.yearsExperience': 'Years Experience',
  'home.stats.projects': 'Projects',
  'home.stats.technologies': 'Technologies',
  'home.stats.engagement': 'Engagement',
  'home.skills.title': 'My Expertise',
  'home.skills.subtitle': 'Technologies and tools I work with daily',
  'home.skills.frontend': 'Frontend',
  'home.skills.backend': 'Backend & APIs',
  'home.skills.tools': 'Tools & DevOps',
  'home.projects.title': 'Featured Projects',
  'home.projects.subtitle': 'Explore my latest work and technical demonstrations',
  'home.projects.viewAll': 'View All Projects',
  'home.features.title': 'Feature Demonstrations',
  'home.features.weather.title': 'Weather App',
  'home.features.weather.description': 'Complete weather application with free API integration',
  'home.features.weather.button': 'View Weather',
  'home.features.crypto.title': 'Crypto Tracker',
  'home.features.crypto.description': 'Live prices and 24h changes of top cryptocurrencies',
  'home.features.crypto.button': 'View Crypto',
  'home.features.angular.title': 'Angular v20 Best Practices',
  'home.features.angular.description': 'Comprehensive summary of modern Angular development with Signals and Standalone Components',
  'home.features.angular.button': 'View Angular',
  'home.features.all.button': 'All Features',

  // Technology names
  'tech.angular': 'Angular',
  'tech.typescript': 'TypeScript',
  'tech.scss': 'SCSS',
  'tech.material': 'Material Design',
  'tech.rxjs': 'RxJS',
  'tech.restful': 'RESTful APIs',
  'tech.httpclient': 'HttpClient',
  'tech.state': 'State Management',
  'tech.node': 'Node.js',
  'tech.git': 'Git',
  'tech.vscode': 'VS Code',
  'tech.npm': 'NPM',
  'tech.webpack': 'Webpack',
  'tech.openweather': 'OpenWeather API',
  'tech.coingecko': 'CoinGecko API',
  'tech.charts': 'Charts',

  // Weather Component
  'weather.title': 'Weather Forecast',
  'weather.subtitle': 'Current weather data for your city',
  'weather.search.label': 'Enter city',
  'weather.search.placeholder': 'e.g. Berlin, Munich, Zurich...',
  'weather.search.button': 'Search',
  'weather.loading': 'Loading...',
  'weather.error': 'Error loading weather data',
  'weather.error.title': 'Error occurred',
  'weather.error.tip': 'Tip',
  'weather.error.suggestion': 'Check the spelling or try another city name',
  'weather.error.close': 'Close',
  'weather.popular.title': 'Popular Cities',
  'weather.refresh': 'Refresh',
  'weather.lastUpdated': 'Last updated',
  'weather.backToHome.button': 'Back to Home',
  'weather.backToHome.tooltip': 'Return to homepage',
  'weather.feelsLike': 'Feels like',
  'weather.minMax': 'Min/Max',
  'weather.humidity': 'Humidity',
  'weather.pressure': 'Pressure',
  'weather.wind': 'Wind',
  'weather.sunrise': 'Sunrise',
  'weather.sunset': 'Sunset',

  // Crypto Component
  'crypto.title': 'Cryptocurrencies',
  'crypto.subtitle': 'Live prices of top cryptocurrencies',
  'crypto.loading': 'Loading...',
  'crypto.refresh.button': 'Refresh',
  'crypto.refresh.tooltip': 'Reload data',
  'crypto.currency.label': 'Currency:',

  'crypto.error.title': 'Loading Error',
  'crypto.error.dismiss': 'Dismiss',
  'crypto.lastUpdate': 'Last Update',
  'crypto.dataStale': 'Data may be outdated',
  'crypto.topCurrencies': 'Top Cryptocurrencies',
  'crypto.table.rank': 'Rank',
  'crypto.table.name': 'Name',
  'crypto.table.price': 'Price',
  'crypto.table.change24h': '24h Change',
  'crypto.table.marketCap': 'Market Cap',
  'crypto.marketSize.label': 'Market Size',
  'crypto.marketSize.top100': 'Top 100 Coins',
  'crypto.marketSize.top250': 'Top 250 Coins',
  'crypto.marketSize.top500': 'Top 500 Coins',
  'crypto.marketSize.top1000': 'Top 1,000 Coins',
  'crypto.marketSize.top2500': 'Top 2,500 Coins',
  'crypto.pageSize.label': 'Coins per page',
  'crypto.pageSize.coinsPerPage': 'coins per page',
  'crypto.pagination.showing': 'Showing',
  'crypto.pagination.of': 'of',
  'crypto.pagination.previous': 'Previous page',
  'crypto.pagination.next': 'Next page',
  'crypto.empty.title': 'No data available',
  'crypto.empty.subtitle': 'Click "Load Data" to see current cryptocurrency prices.',
  'crypto.loadData': 'Load Data',
  'crypto.clickForDetails': 'Click for details',

  // Angular Summary Component
  'angular.header.title': 'Angular v20 Best Practices & Summary',
  'angular.header.subtitle': 'Modern web development with Angular 20 - Signals, Standalone Components & more',
  'angular.backToHome': 'Back to Home',
  'angular.sections.coreFeatures': 'Core Features',
  'angular.sections.bestPractices': 'Best Practices',
  'angular.sections.technologies': 'Technologies Used',
  'angular.sections.examples': 'Code Examples',
  'angular.sections.advanced': 'Advanced Topics',
  'angular.sections.architecture': 'Architecture Patterns',
  'angular.sections.tools': 'CLI & DevTools',
  'angular.features.signals.title': 'Signals',
  'angular.features.signals.description': 'Reactive state management with signal(), computed() and effect() for optimal performance',
  'angular.features.standalone.title': 'Standalone Components',
  'angular.features.standalone.description': 'Module-less architecture - components are standalone by default',
  'angular.features.inject.title': 'inject() Function',
  'angular.features.inject.description': 'Dependency injection with inject() instead of constructor injection',
  'angular.features.controlFlow.title': 'Control Flow',
  'angular.features.controlFlow.description': 'Native @if, @for, @switch syntax instead of structural directives',
  'angular.features.deferrable.title': 'Deferrable Views (@defer)',
  'angular.features.deferrable.description': 'Lazy loading of templates with @defer, @placeholder, @loading and @error blocks',
  'angular.features.inputOutput.title': 'input() & output() Functions',
  'angular.features.inputOutput.description': 'Signal-based Component Inputs and Outputs replace @Input() and @Output() decorators',
  'angular.features.viewQueries.title': 'viewChild() & viewChildren()',
  'angular.features.viewQueries.description': 'Signal-based View Queries for type-safe access to Child Components and DOM elements',
  'angular.features.model.title': 'model() for Two-Way Binding',
  'angular.features.model.description': 'Simplified Two-Way Data Binding with WritableSignal for bidirectional communication',
  'angular.features.onPush.title': 'OnPush Change Detection',
  'angular.features.onPush.description': 'Optimized performance through ChangeDetectionStrategy.OnPush',
  'angular.features.httpClient.title': 'HttpClient with Signals',
  'angular.features.httpClient.description': 'Modern HTTP communication with provideHttpClient(withFetch())',
  'angular.features.resource.title': 'Resource API (Experimental)',
  'angular.features.resource.description': 'Declarative HTTP requests with automatic loading state and error handling',
  'angular.features.typedForms.title': 'Typed Reactive Forms',
  'angular.features.typedForms.description': 'Fully typed forms with FormControl<T>, FormGroup<T> and FormArray<T>',
  'angular.features.router.title': 'Standalone Router',
  'angular.features.router.description': 'Functional routing with provideRouter(), Guards, Resolvers and Lazy Loading',
  'angular.features.material.title': 'Material Design 3',
  'angular.features.material.description': 'Angular Material Components with Material Design 3 theming and Accessibility',
  'angular.features.devtools.title': 'Angular DevTools',
  'angular.features.devtools.description': 'Browser extension for Component Inspection, Profiling and Dependency Injection debugging',
  'angular.features.vite.title': 'Vite & ESBuild',
  'angular.features.vite.description': 'Ultra-fast build times with Vite Dev Server and ESBuild for production builds',
  'angular.bestPractices.components.title': 'Components',
  'angular.bestPractices.components.item1': 'Small, focused components with single responsibility',
  'angular.bestPractices.components.item2': 'Use input() and output() functions instead of decorators',
  'angular.bestPractices.components.item3': 'Prefer inline templates for small components',
  'angular.bestPractices.components.item4': 'OnPush change detection for optimal performance',
  'angular.bestPractices.components.item5': 'Use class and style bindings instead of ngClass/ngStyle',
  'angular.bestPractices.components.item6': 'Implement lifecycle hooks (OnInit, OnDestroy, etc.)',
  'angular.bestPractices.components.item7': 'Use protected for template-only members, private for internal logic',
  'angular.bestPractices.components.item8': 'Extract complex template logic into computed() signals',
  'angular.bestPractices.state.title': 'State Management',
  'angular.bestPractices.state.item1': 'Use signals for local component state',
  'angular.bestPractices.state.item2': 'Use computed() for derived state',
  'angular.bestPractices.state.item3': 'Keep state transformations pure and predictable',
  'angular.bestPractices.state.item4': 'Use update() or set(), never mutate()',
  'angular.bestPractices.state.item5': 'Use effect() only for side effects, not state updates',
  'angular.bestPractices.state.item6': 'Use untracked() to avoid circular dependencies',
  'angular.bestPractices.templates.title': 'Templates',
  'angular.bestPractices.templates.item1': 'Use native control flow (@if, @for, @switch)',
  'angular.bestPractices.templates.item2': 'Keep templates simple, avoid complex logic',
  'angular.bestPractices.templates.item3': 'Use async pipe for observables',
  'angular.bestPractices.templates.item4': 'Use trackBy with @for for efficient list rendering',
  'angular.bestPractices.templates.item5': 'Use @defer for lazy loading heavy components',
  'angular.bestPractices.services.title': 'Services',
  'angular.bestPractices.services.item1': 'Design services around single responsibility',
  'angular.bestPractices.services.item2': 'Use providedIn: "root" for singleton services',
  'angular.bestPractices.services.item3': 'Use inject() function instead of constructor injection',
  'angular.bestPractices.services.item4': 'Expose readonly state with private signals for mutations',
  'angular.bestPractices.services.item5': 'Separate service logic from presentation logic',
  'angular.bestPractices.performance.title': 'Performance',
  'angular.bestPractices.performance.item1': 'Consistently use OnPush change detection',
  'angular.bestPractices.performance.item2': 'Implement lazy loading for feature routes',
  'angular.bestPractices.performance.item3': 'Use NgOptimizedImage for static images',
  'angular.bestPractices.performance.item4': 'Use trackBy with @for for optimal rendering',
  'angular.bestPractices.performance.item5': 'Use @defer for on-demand component loading',
  'angular.bestPractices.performance.item6': 'Prefer pure pipes (default), impure only when necessary',
  'angular.bestPractices.performance.item7': 'Use Web Workers for CPU-intensive computations',
  'angular.bestPractices.typescript.title': 'TypeScript',
  'angular.bestPractices.typescript.item1': 'Strict type checking enabled',
  'angular.bestPractices.typescript.item2': 'Use type inference when obvious',
  'angular.bestPractices.typescript.item3': 'Avoid any, use unknown when uncertain',
  'angular.bestPractices.typescript.item4': 'Use readonly for properties that don\'t change',
  'angular.bestPractices.typescript.item5': 'Use const for all variables that aren\'t reassigned',
  'angular.bestPractices.typescript.item6': 'Explicit return types for public API methods',
  'angular.bestPractices.accessibility.title': 'Accessibility (a11y)',
  'angular.bestPractices.accessibility.item1': 'Use semantic HTML elements',
  'angular.bestPractices.accessibility.item2': 'Add ARIA labels for dynamic content',
  'angular.bestPractices.accessibility.item3': 'Keyboard navigation for all interactive elements',
  'angular.bestPractices.accessibility.item4': 'Sufficient color contrasts (WCAG 2.1 AA)',
  'angular.bestPractices.accessibility.item5': 'Focus management for modal dialogs and routes',
  'angular.bestPractices.testing.title': 'Testing',
  'angular.bestPractices.testing.item1': 'Write unit tests for all business logic',
  'angular.bestPractices.testing.item2': 'Use TestBed for component tests with dependency injection',
  'angular.bestPractices.testing.item3': 'Test signals with TestBed.inject() and fixture.detectChanges()',
  'angular.bestPractices.testing.item4': 'Mock services for isolated component tests',
  'angular.bestPractices.testing.item5': 'E2E tests for critical user journeys (Cypress/Playwright)',
  'angular.bestPractices.errorHandling.title': 'Error Handling',
  'angular.bestPractices.errorHandling.item1': 'Implement global error handler for unexpected errors',
  'angular.bestPractices.errorHandling.item2': 'Use HTTP interceptor for centralized API error handling',
  'angular.bestPractices.errorHandling.item3': 'Use catchError() for observable error handling',
  'angular.bestPractices.errorHandling.item4': 'Display user-friendly error messages with context',
  'angular.bestPractices.security.title': 'Security',
  'angular.bestPractices.security.item1': 'Use sanitization for user input (XSS protection)',
  'angular.bestPractices.security.item2': 'Use CSRF tokens for state-changing requests',
  'angular.bestPractices.security.item3': 'Use HTTP interceptor for authorization headers',
  'angular.bestPractices.security.item4': 'Never store sensitive data in localStorage',
  'angular.bestPractices.security.item5': 'Configure Content Security Policy (CSP)',
  'angular.bestPractices.codeOrganization.title': 'Code Organization',
  'angular.bestPractices.codeOrganization.item1': 'Organize by features, not by file types',
  'angular.bestPractices.codeOrganization.item2': 'Shared/Common module for reusable components',
  'angular.bestPractices.codeOrganization.item3': 'Core module for singleton services and guards',
  'angular.bestPractices.codeOrganization.item4': 'One concept per file (component, service, etc.)',
  'angular.bestPractices.codeOrganization.item5': 'Index files (index.ts) for public API exports',
  'angular.bestPractices.dependency.title': 'Dependency Management',
  'angular.bestPractices.dependency.item1': 'Update dependencies regularly (ng update)',
  'angular.bestPractices.dependency.item2': 'Pay attention to peer dependencies and compatibility',
  'angular.bestPractices.dependency.item3': 'Monitor bundle size with source-map-explorer',
  'angular.bestPractices.dependency.item4': 'Use tree-shakeable providers (providedIn)',
  'angular.bestPractices.buildDeploy.title': 'Build & Deployment',
  'angular.bestPractices.buildDeploy.item1': 'Production build with --configuration=production',
  'angular.bestPractices.buildDeploy.item2': 'AOT compilation for better performance',
  'angular.bestPractices.buildDeploy.item3': 'Use environment-specific configurations',
  'angular.bestPractices.buildDeploy.item4': 'Enable source maps only in development',
  'angular.bestPractices.buildDeploy.item5': 'CI/CD pipeline for automated testing and deployment',
  'angular.examples.signals.title': 'Signals Example',
  'angular.examples.signals.subtitle': 'Reactive State Management',
  'angular.examples.signals.description': 'Signals provide a simple and performant way to manage reactive state.',
  'angular.examples.inject.title': 'Dependency Injection',
  'angular.examples.inject.subtitle': 'Modern DI with inject()',
  'angular.examples.inject.description': 'The inject() function enables cleaner and more readable dependency injection.',
  'angular.examples.controlFlow.title': 'Control Flow',
  'angular.examples.controlFlow.subtitle': 'Native Template Syntax',
  'angular.examples.controlFlow.description': 'Native @if, @else syntax is more intuitive and performant than *ngIf.',
  'angular.actions.title': 'Ready for more?',
  'angular.actions.description': 'Explore more features and projects on my portfolio or learn more about Angular.',
  'angular.actions.backHome': 'Back to Home',
  'angular.actions.learnMore': 'Learn More About Angular',

  // Detailed Code Examples
  'angular.sections.detailedExamples': 'Detailed Code Examples',
  'angular.sections.detailedExamplesDesc': 'Practical implementations of modern Angular v20 patterns',
  'angular.codeExamples.signals.title': 'Signals API',
  'angular.codeExamples.signals.subtitle': 'Reactive State Management',
  'angular.codeExamples.signals.description': 'Signals provide a simple and performant API for reactive state. With signal(), computed() and effect() complex data flows can be elegantly implemented.',
  'angular.codeExamples.component.title': 'Modern Component',
  'angular.codeExamples.component.subtitle': 'input(), output() & model()',
  'angular.codeExamples.component.description': 'New signal-based APIs for Component Inputs, Outputs and Two-Way Binding replace Property/Event Decorators.',
  'angular.codeExamples.controlFlow.title': 'Control Flow Syntax',
  'angular.codeExamples.controlFlow.subtitle': '@if, @for, @switch',
  'angular.codeExamples.controlFlow.description': 'Native template syntax for conditions and loops - more performant and intuitive than structural directives.',
  'angular.codeExamples.service.title': 'Service with Signals',
  'angular.codeExamples.service.subtitle': 'State Management Pattern',
  'angular.codeExamples.service.description': 'Services use Signals for state management with readonly exposed state and private mutations.',
  'angular.codeExamples.routing.title': 'Lazy Loading Routing',
  'angular.codeExamples.routing.subtitle': 'loadComponent & loadChildren',
  'angular.codeExamples.routing.description': 'Standalone Components enable simple lazy loading without NgModules.',
  'angular.codeExamples.forms.title': 'Reactive Forms',
  'angular.codeExamples.forms.subtitle': 'FormControl with Signals',
  'angular.codeExamples.forms.description': 'Reactive Forms with toSignal() for optimal integration of RxJS and Signals.',
  'angular.codeExamples.rxjs.title': 'RxJS Interop',
  'angular.codeExamples.rxjs.subtitle': 'toSignal & toObservable',
  'angular.codeExamples.rxjs.description': 'Seamless integration between Signals and Observables with the interop functions.',
  'angular.codeExamples.guards.title': 'Functional Guards',
  'angular.codeExamples.guards.subtitle': 'Route Protection',
  'angular.codeExamples.guards.description': 'Modern guards as functions instead of classes - simpler and more testable.',
  'angular.codeExamples.pipes.title': 'Custom Pipes',
  'angular.codeExamples.pipes.subtitle': 'Transform & Pure',
  'angular.codeExamples.pipes.description': 'Pure Pipes for efficient data transformation with automatic caching.',
  'angular.codeExamples.interceptor.title': 'HTTP Interceptor',
  'angular.codeExamples.interceptor.subtitle': 'Functional Interceptors',
  'angular.codeExamples.interceptor.description': 'Modern functional interceptors with inject() for auth and error handling.',
  'angular.codeExamples.directive.title': 'Custom Directive',
  'angular.codeExamples.directive.subtitle': 'Signal-based',
  'angular.codeExamples.directive.description': 'Directives with signal inputs and host bindings without decorators.',
  'angular.codeExamples.deferrable.title': 'Deferrable Views',
  'angular.codeExamples.deferrable.subtitle': '@defer Syntax',
  'angular.codeExamples.deferrable.description': 'Lazy loading of templates with @defer, @placeholder and @loading blocks.',
  'angular.codeExamples.viewChild.title': 'View Queries',
  'angular.codeExamples.viewChild.subtitle': 'viewChild & viewChildren',
  'angular.codeExamples.viewChild.description': 'Signal-based view queries for type-safe component and element access.',
  'angular.codeExamples.hostBinding.title': 'Host Bindings',
  'angular.codeExamples.hostBinding.subtitle': 'Component Host',
  'angular.codeExamples.hostBinding.description': 'Declarative host bindings for class, style, attribute and events in host object.',
  'angular.codeExamples.contentChild.title': 'Content Projection',
  'angular.codeExamples.contentChild.subtitle': 'contentChild Queries',
  'angular.codeExamples.contentChild.description': 'Content queries with contentChild and contentChildren for ng-content access.',
  'angular.codeExamples.testing.title': 'Component Testing',
  'angular.codeExamples.testing.subtitle': 'Jasmine & TestBed',
  'angular.codeExamples.testing.description': 'Unit tests for signals, computed values and component interactions.',
  'angular.codeExamples.resource.title': 'Resource API',
  'angular.codeExamples.resource.subtitle': 'Declarative HTTP Requests',
  'angular.codeExamples.resource.description': 'Experimental Resource API for automatic loading, error and data state management.',
  'angular.codeExamples.animations.title': 'Animations',
  'angular.codeExamples.animations.subtitle': 'Angular Animations',
  'angular.codeExamples.animations.description': 'Declarative animations with triggers, states, transitions and complex sequences.',
  'angular.codeExamples.stateManagement.title': 'State Management',
  'angular.codeExamples.stateManagement.subtitle': 'Central App Store',
  'angular.codeExamples.stateManagement.description': 'Signal-based central store with computed state and actions for global state management.',
  'angular.codeExamples.httpSignals.title': 'HTTP with Signals',
  'angular.codeExamples.httpSignals.subtitle': 'toSignal & toObservable',
  'angular.codeExamples.httpSignals.description': 'Reactive HTTP communication with toSignal for Observable-to-Signal conversion.',
  'angular.codeExamples.performance.title': 'Performance Optimization',
  'angular.codeExamples.performance.subtitle': 'OnPush & TrackBy',
  'angular.codeExamples.performance.description': 'Best practices for optimal performance: OnPush, TrackBy, Virtual Scrolling and Lazy Loading.',

  // Advanced Topics
  'angular.advanced.routing.title': 'Routing & Navigation',
  'angular.advanced.routing.description': 'Powerful routing system with guards, resolvers and lazy loading',
  'angular.advanced.routing.topic1': 'Functional Route Guards (canActivate, canDeactivate)',
  'angular.advanced.routing.topic2': 'Route Resolvers for data preloading',
  'angular.advanced.routing.topic3': 'Lazy Loading with loadComponent() and loadChildren()',
  'angular.advanced.routing.topic4': 'Child Routes and nested layouts',
  'angular.advanced.routing.topic5': 'Route Parameters and Query Parameters',
  'angular.advanced.routing.topic6': 'Preloading Strategies for optimal performance',
  'angular.advanced.forms.title': 'Reactive Forms',
  'angular.advanced.forms.description': 'Type-safe form handling with validation and dynamic controls',
  'angular.advanced.forms.topic1': 'Typed Reactive Forms with FormControl<T>',
  'angular.advanced.forms.topic2': 'Custom Validators (sync & async)',
  'angular.advanced.forms.topic3': 'Dynamic Forms with FormBuilder and FormArray',
  'angular.advanced.forms.topic4': 'Form State Management with valueChanges and statusChanges',
  'angular.advanced.forms.topic5': 'Custom Form Controls with ControlValueAccessor',
  'angular.advanced.forms.topic6': 'Form Validation Error Handling and Display',
  'angular.advanced.rxjs.title': 'RxJS Patterns & Operators',
  'angular.advanced.rxjs.description': 'Reactive programming with Observables, Subjects and Operators',
  'angular.advanced.rxjs.topic1': 'toSignal() and toObservable() for Signal/Observable interop',
  'angular.advanced.rxjs.topic2': 'Higher-Order Operators (switchMap, mergeMap, concatMap)',
  'angular.advanced.rxjs.topic3': 'Error Handling with catchError and retry',
  'angular.advanced.rxjs.topic4': 'Multicasting with Subject, BehaviorSubject, ReplaySubject',
  'angular.advanced.rxjs.topic5': 'Combination Operators (combineLatest, forkJoin, zip)',
  'angular.advanced.rxjs.topic6': 'Memory Leak Prevention and Unsubscribe Patterns',
  'angular.advanced.changeDetection.title': 'Change Detection Deep Dive',
  'angular.advanced.changeDetection.description': 'Optimizing Change Detection for maximum performance',
  'angular.advanced.changeDetection.topic1': 'Default vs OnPush Change Detection Strategies',
  'angular.advanced.changeDetection.topic2': 'Zone.js and NgZone for async updates',
  'angular.advanced.changeDetection.topic3': 'Manual Change Detection with ChangeDetectorRef',
  'angular.advanced.changeDetection.topic4': 'Signals and Zone-less Change Detection',
  'angular.advanced.changeDetection.topic5': 'Performance Profiling with Angular DevTools',
  'angular.advanced.animations.title': 'Animations API',
  'angular.advanced.animations.description': 'Declarative animations with Angular Animations',
  'angular.advanced.animations.topic1': 'State-based Animations with trigger, state, transition',
  'angular.advanced.animations.topic2': 'Enter/Leave Animations for @if and @for',
  'angular.advanced.animations.topic3': 'Keyframe Animations and Animation Curves',
  'angular.advanced.animations.topic4': 'Animation Callbacks and Events',
  'angular.advanced.animations.topic5': 'Reusable Animation Functions',
  'angular.advanced.testing.title': 'Testing Strategies',
  'angular.advanced.testing.description': 'Comprehensive testing with Jasmine, Karma and Playwright',
  'angular.advanced.testing.topic1': 'Component Testing with TestBed and ComponentFixture',
  'angular.advanced.testing.topic2': 'Signal Testing with TestBed.inject() and runInInjectionContext',
  'angular.advanced.testing.topic3': 'Service Mocking and Spy Pattern',
  'angular.advanced.testing.topic4': 'HttpClientTestingModule for HTTP Testing',
  'angular.advanced.testing.topic5': 'E2E Testing with Playwright or Cypress',
  'angular.advanced.testing.topic6': 'Code Coverage and Test Reporting',
  'angular.advanced.ssr.title': 'Server-Side Rendering & Hydration',
  'angular.advanced.ssr.description': 'SSR for better performance, SEO and Core Web Vitals',
  'angular.advanced.ssr.topic1': 'Angular Universal Setup and Configuration',
  'angular.advanced.ssr.topic2': 'Non-destructive Hydration for seamless client takeover',
  'angular.advanced.ssr.topic3': 'Static Site Generation (SSG) with Prerendering',
  'angular.advanced.ssr.topic4': '@defer for Progressive Hydration',
  'angular.advanced.ssr.topic5': 'Transfer State for server-to-client data transfer',
  'angular.advanced.ssr.topic6': 'Platform-specific code with isPlatformBrowser/Server',
  'angular.advanced.i18n.title': 'Internationalization (i18n)',
  'angular.advanced.i18n.description': 'Multi-language support and localization',
  'angular.advanced.i18n.topic1': 'Custom Translation Service with Signal-based translations',
  'angular.advanced.i18n.topic2': '@angular/localize for Build-Time Translation',
  'angular.advanced.i18n.topic3': 'ICU Message Format for Plurals and Select',
  'angular.advanced.i18n.topic4': 'Runtime Language Switching',
  'angular.advanced.i18n.topic5': 'Date, Number, Currency Pipes with Locale',
  'angular.advanced.security.title': 'Security Best Practices',
  'angular.advanced.security.description': 'Built-in security features and best practices',
  'angular.advanced.security.topic1': 'DomSanitizer for XSS protection with dynamic HTML',
  'angular.advanced.security.topic2': 'CSRF Protection with HttpClient',
  'angular.advanced.security.topic3': 'Content Security Policy (CSP) Configuration',
  'angular.advanced.security.topic4': 'Trusted Types API Support',
  'angular.advanced.security.topic5': 'Secure Authentication with JWT and HTTP Interceptors',
  'angular.advanced.security.topic6': 'HTTPS Enforcement and Secure Cookies',
  'angular.advanced.directives.title': 'Advanced Directives',
  'angular.advanced.directives.description': 'Structural and Attribute Directives for advanced templates',
  'angular.advanced.directives.topic1': 'Custom Structural Directives with ng-template',
  'angular.advanced.directives.topic2': 'Attribute Directives with Signal Inputs',
  'angular.advanced.directives.topic3': 'Host Bindings and Host Listeners in host object',
  'angular.advanced.directives.topic4': 'Directive Composition API',
  'angular.advanced.directives.topic5': 'Renderer2 for platform-safe DOM manipulation',
  'angular.advanced.pipes.title': 'Custom Pipes',
  'angular.advanced.pipes.description': 'Pure and Impure Pipes for data transformation',
  'angular.advanced.pipes.topic1': 'Pure Pipes with automatic caching',
  'angular.advanced.pipes.topic2': 'Impure Pipes for dynamic data',
  'angular.advanced.pipes.topic3': 'Async Pipe for Observable/Promise handling',
  'angular.advanced.pipes.topic4': 'Parameterized Pipes',
  'angular.advanced.pipes.topic5': 'Performance Considerations and Best Practices',
  'angular.advanced.httpInterceptors.title': 'HTTP Interceptors',
  'angular.advanced.httpInterceptors.description': 'Request/Response interception for auth, logging and error handling',
  'angular.advanced.httpInterceptors.topic1': 'Functional Interceptors with HttpInterceptorFn',
  'angular.advanced.httpInterceptors.topic2': 'Authentication Interceptor for JWT Tokens',
  'angular.advanced.httpInterceptors.topic3': 'Error Handling and Retry Logic',
  'angular.advanced.httpInterceptors.topic4': 'Request/Response Logging',
  'angular.advanced.httpInterceptors.topic5': 'Multiple Interceptors and Execution Order',
  'angular.advanced.stateManagement.title': 'State Management Patterns',
  'angular.advanced.stateManagement.description': 'Different approaches for application state management',
  'angular.advanced.stateManagement.topic1': 'Signal-based State Management with Services',
  'angular.advanced.stateManagement.topic2': 'NgRx Store for complex state management',
  'angular.advanced.stateManagement.topic3': 'NGRX Signal Store (new Signal-based API)',
  'angular.advanced.stateManagement.topic4': 'Component Store for local feature state',
  'angular.advanced.stateManagement.topic5': 'RxJS-based State Management with BehaviorSubject',
  'angular.advanced.moduleFederation.title': 'Module Federation',
  'angular.advanced.moduleFederation.description': 'Micro-Frontend architecture with Webpack Module Federation',
  'angular.advanced.moduleFederation.topic1': 'Module Federation Setup with @angular-architects/module-federation',
  'angular.advanced.moduleFederation.topic2': 'Remote Module Loading at runtime',
  'angular.advanced.moduleFederation.topic3': 'Shared Dependencies Management',
  'angular.advanced.moduleFederation.topic4': 'Micro-Frontend Communication Patterns',
  'angular.advanced.pwa.title': 'Progressive Web Apps (PWA)',
  'angular.advanced.pwa.description': 'App-like experience with Service Workers and Offline Support',
  'angular.advanced.pwa.topic1': '@angular/pwa Setup and Configuration',
  'angular.advanced.pwa.topic2': 'Service Worker Caching Strategies',
  'angular.advanced.pwa.topic3': 'Offline Support and Background Sync',
  'angular.advanced.pwa.topic4': 'Push Notifications',
  'angular.advanced.pwa.topic5': 'App Manifest and Install Prompts',
  'angular.architecture.smartDumb.title': 'Smart & Dumb Components',
  'angular.architecture.smartDumb.description': 'Separation of container (smart) and presentational (dumb) components for better maintainability',
  'angular.architecture.smartDumb.detailTitle': 'Smart & Dumb Components Pattern',
  'angular.architecture.smartDumb.explanation': 'The Smart & Dumb Components pattern separates components into containers (smart) that handle business logic and state management, and presentational components (dumb) that are only responsible for display.',
  'angular.architecture.smartDumb.benefit1': 'Better reusability through isolated presentational components',
  'angular.architecture.smartDumb.benefit2': 'Easier testing - dumb components don\'t require service mocks',
  'angular.architecture.smartDumb.benefit3': 'Optimized performance with OnPush change detection',
  'angular.architecture.smartDumb.benefit4': 'Clear responsibilities - easier maintenance',
  'angular.architecture.smartDumb.useCase1': 'List components with data loading logic',
  'angular.architecture.smartDumb.useCase2': 'Form containers with validation and API calls',
  'angular.architecture.smartDumb.useCase3': 'Dashboard widgets with state management',
  'angular.architecture.smartDumb.implementation1': 'Smart components use services and signals for state',
  'angular.architecture.smartDumb.implementation2': 'Dumb components use input() and output() for communication',
  'angular.architecture.smartDumb.implementation3': 'Dumb components set ChangeDetectionStrategy.OnPush',
  'angular.architecture.smartDumb.implementation4': 'No direct service injections in dumb components',
  'angular.architecture.smartDumb.challenge1': 'Prop drilling with deeply nested components',
  'angular.architecture.smartDumb.challenge2': 'Boilerplate for input/output bindings',

  'angular.architecture.facade.title': 'Facade Pattern',
  'angular.architecture.facade.description': 'Simplified API for complex state management logic',
  'angular.architecture.facade.detailTitle': 'Facade Pattern',
  'angular.architecture.facade.explanation': 'The Facade Pattern provides a simplified, unified interface to multiple complex services. It bundles state management, API calls and business logic behind a simple API.',
  'angular.architecture.facade.benefit1': 'Reduced complexity for components',
  'angular.architecture.facade.benefit2': 'Central place for feature logic',
  'angular.architecture.facade.benefit3': 'Easier refactoring through encapsulation',
  'angular.architecture.facade.benefit4': 'Better testability',
  'angular.architecture.facade.useCase1': 'State management with multiple services',
  'angular.architecture.facade.useCase2': 'Coordination of API calls',
  'angular.architecture.facade.useCase3': 'Feature-specific business logic',
  'angular.architecture.facade.implementation1': 'Facade service injects all required services',
  'angular.architecture.facade.implementation2': 'Exposes observables for reactive state',
  'angular.architecture.facade.implementation3': 'Provides action methods for all operations',
  'angular.architecture.facade.implementation4': 'Handles error management centrally',
  'angular.architecture.facade.challenge1': 'Can become "God Objects"',
  'angular.architecture.facade.challenge2': 'Additional abstraction layer',

  'angular.architecture.module.title': 'Feature Modules',
  'angular.architecture.module.description': 'Organization of features into reusable modules',
  'angular.architecture.module.detailTitle': 'Feature Module Pattern',
  'angular.architecture.module.explanation': 'Feature Modules group related functionality into their own modules. With standalone components, features are organized via routes and barrel exports.',
  'angular.architecture.module.benefit1': 'Clear feature boundaries',
  'angular.architecture.module.benefit2': 'Reusability',
  'angular.architecture.module.benefit3': 'Better code organization',
  'angular.architecture.module.benefit4': 'Enables lazy loading',
  'angular.architecture.module.useCase1': 'Large applications with multiple features',
  'angular.architecture.module.useCase2': 'Reusable UI components',
  'angular.architecture.module.useCase3': 'Shared services and utilities',
  'angular.architecture.module.implementation1': 'CoreModule for singleton services',
  'angular.architecture.module.implementation2': 'SharedModule for common components',
  'angular.architecture.module.implementation3': 'Feature routes with loadChildren',
  'angular.architecture.module.implementation4': 'Barrel exports (index.ts) for clean imports',
  'angular.architecture.module.challenge1': 'Module boundaries must be well thought out',
  'angular.architecture.module.challenge2': 'Avoid circular dependencies',

  'angular.architecture.lazy.title': 'Lazy Loading',
  'angular.architecture.lazy.description': 'On-demand loading of features for faster initial loads',
  'angular.architecture.lazy.detailTitle': 'Lazy Loading Pattern',
  'angular.architecture.lazy.explanation': 'Lazy Loading loads features only when needed. This reduces initial bundle size and significantly speeds up first page load.',
  'angular.architecture.lazy.benefit1': 'Smaller initial bundle size',
  'angular.architecture.lazy.benefit2': 'Faster initial load',
  'angular.architecture.lazy.benefit3': 'Better performance',
  'angular.architecture.lazy.benefit4': 'On-demand resource loading',
  'angular.architecture.lazy.useCase1': 'Admin areas',
  'angular.architecture.lazy.useCase2': 'Rarely used features',
  'angular.architecture.lazy.useCase3': 'Large feature modules',
  'angular.architecture.lazy.implementation1': 'loadChildren() in routes',
  'angular.architecture.lazy.implementation2': 'loadComponent() for individual components',
  'angular.architecture.lazy.implementation3': 'PreloadingStrategy for intelligent preloading',
  'angular.architecture.lazy.implementation4': 'Route guards for access control',
  'angular.architecture.lazy.challenge1': 'Loading delay on first access',
  'angular.architecture.lazy.challenge2': 'More complex build configuration',

  'angular.architecture.repository.title': 'Repository Pattern',
  'angular.architecture.repository.description': 'Centralized data access layer for API communication and caching',
  'angular.architecture.repository.detailTitle': 'Repository Pattern',
  'angular.architecture.repository.explanation': 'The Repository Pattern abstracts data access behind a unified interface. It separates business logic from data access logic.',
  'angular.architecture.repository.benefit1': 'Centralized data access logic',
  'angular.architecture.repository.benefit2': 'Exchangeable data sources',
  'angular.architecture.repository.benefit3': 'Easy mocking for tests',
  'angular.architecture.repository.benefit4': 'Unified error handling',
  'angular.architecture.repository.useCase1': 'REST API access',
  'angular.architecture.repository.useCase2': 'Local storage abstraction',
  'angular.architecture.repository.useCase3': 'Caching layer',
  'angular.architecture.repository.implementation1': 'Generic base repository',
  'angular.architecture.repository.implementation2': 'Repository interface',
  'angular.architecture.repository.implementation3': 'Specific repositories extend base',
  'angular.architecture.repository.implementation4': 'Error handling in base methods',
  'angular.architecture.repository.challenge1': 'Additional abstraction layer',
  'angular.architecture.repository.challenge2': 'Overhead for simple CRUD',

  'angular.architecture.observer.title': 'Observer Pattern',
  'angular.architecture.observer.description': 'Event-based communication with RxJS Observables and Subjects',
  'angular.architecture.observer.detailTitle': 'Observer Pattern',
  'angular.architecture.observer.explanation': 'The Observer Pattern enables reactive programming with RxJS. Components subscribe to data streams and automatically react to changes.',
  'angular.architecture.observer.benefit1': 'Reactive data streams',
  'angular.architecture.observer.benefit2': 'Loose coupling',
  'angular.architecture.observer.benefit3': 'Automatic updates',
  'angular.architecture.observer.benefit4': 'Powerful operator system',
  'angular.architecture.observer.useCase1': 'State management',
  'angular.architecture.observer.useCase2': 'Event bus systems',
  'angular.architecture.observer.useCase3': 'Real-time data',
  'angular.architecture.observer.implementation1': 'Subject for events',
  'angular.architecture.observer.implementation2': 'BehaviorSubject for state',
  'angular.architecture.observer.implementation3': 'ReplaySubject for caching',
  'angular.architecture.observer.implementation4': 'takeUntil for memory leak prevention',
  'angular.architecture.observer.challenge1': 'Subscription management',
  'angular.architecture.observer.challenge2': 'Complex RxJS operators',

  'angular.architecture.singleton.title': 'Singleton Pattern',
  'angular.architecture.singleton.description': 'Shared services with providedIn: "root" for app-wide state',
  'angular.architecture.singleton.detailTitle': 'Singleton Pattern',
  'angular.architecture.singleton.explanation': 'Singleton services exist only once in the entire application. Angular\'s Dependency Injection automatically creates singletons with providedIn: "root".',
  'angular.architecture.singleton.benefit1': 'Shared state across entire app',
  'angular.architecture.singleton.benefit2': 'Efficient resource usage',
  'angular.architecture.singleton.benefit3': 'Central configuration',
  'angular.architecture.singleton.benefit4': 'Simple dependency injection',
  'angular.architecture.singleton.useCase1': 'Auth services',
  'angular.architecture.singleton.useCase2': 'Configuration services',
  'angular.architecture.singleton.useCase3': 'Logging services',
  'angular.architecture.singleton.implementation1': 'providedIn: "root"',
  'angular.architecture.singleton.implementation2': 'CoreModule with forRoot()',
  'angular.architecture.singleton.implementation3': 'Import guards in CoreModule',
  'angular.architecture.singleton.implementation4': 'ApplicationConfig providers',
  'angular.architecture.singleton.challenge1': 'Testing can be more complex',
  'angular.architecture.singleton.challenge2': 'Global state hard to track',

  'angular.architecture.decorator.title': 'Decorator Pattern',
  'angular.architecture.decorator.description': 'Extending functionality with @Component, @Injectable and custom decorators',
  'angular.architecture.decorator.detailTitle': 'Decorator Pattern',
  'angular.architecture.decorator.explanation': 'Decorators extend classes, methods or properties with additional functionality. TypeScript decorators are the foundation of Angular.',
  'angular.architecture.decorator.benefit1': 'Reusable cross-cutting concerns',
  'angular.architecture.decorator.benefit2': 'Clean, declarative code',
  'angular.architecture.decorator.benefit3': 'Metadata for reflection',
  'angular.architecture.decorator.benefit4': 'Aspect-oriented programming',
  'angular.architecture.decorator.useCase1': 'Logging',
  'angular.architecture.decorator.useCase2': 'Caching/Memoization',
  'angular.architecture.decorator.useCase3': 'Auto-unsubscribe',
  'angular.architecture.decorator.implementation1': 'Method decorators',
  'angular.architecture.decorator.implementation2': 'Class decorators',
  'angular.architecture.decorator.implementation3': 'Property decorators',
  'angular.architecture.decorator.implementation4': 'Parameter decorators',
  'angular.architecture.decorator.challenge1': 'TypeScript experimentalDecorators',
  'angular.architecture.decorator.challenge2': 'Debugging can be harder',

  'angular.architecture.strategy.title': 'Strategy Pattern',
  'angular.architecture.strategy.description': 'Interchangeable algorithms with Change Detection Strategies and Guards',
  'angular.architecture.strategy.detailTitle': 'Strategy Pattern',
  'angular.architecture.strategy.explanation': 'The Strategy Pattern enables algorithm selection at runtime. Different implementations of an interface can be dynamically swapped.',
  'angular.architecture.strategy.benefit1': 'Flexible algorithm selection',
  'angular.architecture.strategy.benefit2': 'Open/Closed Principle',
  'angular.architecture.strategy.benefit3': 'Easy testing of individual strategies',
  'angular.architecture.strategy.benefit4': 'Runtime configurability',
  'angular.architecture.strategy.useCase1': 'Validation',
  'angular.architecture.strategy.useCase2': 'Sorting algorithms',
  'angular.architecture.strategy.useCase3': 'Payment processing',
  'angular.architecture.strategy.implementation1': 'Define strategy interface',
  'angular.architecture.strategy.implementation2': 'Concrete strategy classes',
  'angular.architecture.strategy.implementation3': 'Context uses strategy',
  'angular.architecture.strategy.implementation4': 'DI for strategy injection',
  'angular.architecture.strategy.challenge1': 'More classes required',
  'angular.architecture.strategy.challenge2': 'Strategy selection logic needed',

  'angular.architecture.adapter.title': 'Adapter Pattern',
  'angular.architecture.adapter.description': 'Transforming external APIs into internal interfaces with services',
  'angular.architecture.adapter.detailTitle': 'Adapter Pattern',
  'angular.architecture.adapter.explanation': 'The Adapter Pattern converts one interface into another. Perfect for integrating external APIs into internal domain models.',
  'angular.architecture.adapter.benefit1': 'Decoupling from external APIs',
  'angular.architecture.adapter.benefit2': 'Consistent internal models',
  'angular.architecture.adapter.benefit3': 'Easy API switching',
  'angular.architecture.adapter.benefit4': 'Type safety',
  'angular.architecture.adapter.useCase1': 'REST API integration',
  'angular.architecture.adapter.useCase2': 'Legacy system integration',
  'angular.architecture.adapter.useCase3': 'Third-party libraries',
  'angular.architecture.adapter.implementation1': 'Create adapter service',
  'angular.architecture.adapter.implementation2': 'Mapping methods',
  'angular.architecture.adapter.implementation3': 'RxJS map() operator',
  'angular.architecture.adapter.implementation4': 'Type guards for validation',
  'angular.architecture.adapter.challenge1': 'Additional mapping code',
  'angular.architecture.adapter.challenge2': 'Performance with large datasets',

  'angular.architecture.featureSlice.title': 'Feature-Slice Architecture',
  'angular.architecture.featureSlice.description': 'Organization by features instead of types - each feature contains components, services, state',
  'angular.architecture.featureSlice.detailTitle': 'Feature-Slice Architecture',
  'angular.architecture.featureSlice.explanation': 'Feature-Slice Architecture organizes code by business features instead of technical types. Each feature is an autonomous slice with its own components, services and state.',
  'angular.architecture.featureSlice.benefit1': 'Better feature cohesion',
  'angular.architecture.featureSlice.benefit2': 'Easier code navigation',
  'angular.architecture.featureSlice.benefit3': 'Team ownership per feature',
  'angular.architecture.featureSlice.benefit4': 'Reduced coupling between features',
  'angular.architecture.featureSlice.useCase1': 'Large enterprise applications',
  'angular.architecture.featureSlice.useCase2': 'Multi-team development',
  'angular.architecture.featureSlice.useCase3': 'Microservices-like frontend structure',
  'angular.architecture.featureSlice.implementation1': 'Feature folders with Data/Domain/UI',
  'angular.architecture.featureSlice.implementation2': 'Feature facade as API',
  'angular.architecture.featureSlice.implementation3': 'Feature routes',
  'angular.architecture.featureSlice.implementation4': 'Barrel exports',
  'angular.architecture.featureSlice.challenge1': 'Shared code between features',
  'angular.architecture.featureSlice.challenge2': 'Defining feature boundaries',

  'angular.architecture.cleanArchitecture.title': 'Clean Architecture',
  'angular.architecture.cleanArchitecture.description': 'Separation into layers: Presentation, Domain, Data - dependencies point inward',
  'angular.architecture.cleanArchitecture.detailTitle': 'Clean Architecture',
  'angular.architecture.cleanArchitecture.explanation': 'Clean Architecture separates code into concentric layers. Dependencies always point inward: Presentation → Application → Domain. The domain layer is independent.',
  'angular.architecture.cleanArchitecture.benefit1': 'High testability',
  'angular.architecture.cleanArchitecture.benefit2': 'Framework independence',
  'angular.architecture.cleanArchitecture.benefit3': 'Clear responsibilities',
  'angular.architecture.cleanArchitecture.benefit4': 'Long-term maintainability',
  'angular.architecture.cleanArchitecture.useCase1': 'Complex business logic',
  'angular.architecture.cleanArchitecture.useCase2': 'Long-lived applications',
  'angular.architecture.cleanArchitecture.useCase3': 'Team with DDD experience',
  'angular.architecture.cleanArchitecture.implementation1': 'Domain layer with entities',
  'angular.architecture.cleanArchitecture.implementation2': 'Use cases in application layer',
  'angular.architecture.cleanArchitecture.implementation3': 'Infrastructure for external services',
  'angular.architecture.cleanArchitecture.implementation4': 'Presentation with components',
  'angular.architecture.cleanArchitecture.challenge1': 'High initial effort',
  'angular.architecture.cleanArchitecture.challenge2': 'Lots of boilerplate',

  'angular.architecture.cqrs.title': 'CQRS Pattern',
  'angular.architecture.cqrs.description': 'Command Query Responsibility Segregation - separation of read and write operations',
  'angular.architecture.cqrs.detailTitle': 'CQRS Pattern',
  'angular.architecture.cqrs.explanation': 'CQRS separates read (queries) and write operations (commands). Commands change state, queries only read it. Both can be optimized differently.',
  'angular.architecture.cqrs.benefit1': 'Optimized read/write models',
  'angular.architecture.cqrs.benefit2': 'Scalability',
  'angular.architecture.cqrs.benefit3': 'Clearer intentions',
  'angular.architecture.cqrs.benefit4': 'Event sourcing possible',
  'angular.architecture.cqrs.useCase1': 'Complex domain models',
  'angular.architecture.cqrs.useCase2': 'Different read/write load',
  'angular.architecture.cqrs.useCase3': 'Event-based systems',
  'angular.architecture.cqrs.implementation1': 'Command and query interfaces',
  'angular.architecture.cqrs.implementation2': 'CommandBus and QueryBus',
  'angular.architecture.cqrs.implementation3': 'Separate handlers',
  'angular.architecture.cqrs.implementation4': 'Event publishing after commands',
  'angular.architecture.cqrs.challenge1': 'Increased complexity',
  'angular.architecture.cqrs.challenge2': 'Eventual consistency',

  'angular.architecture.eventDriven.title': 'Event-Driven Architecture',
  'angular.architecture.eventDriven.description': 'Loosely coupled components communicate via events and observables',
  'angular.architecture.eventDriven.detailTitle': 'Event-Driven Architecture',
  'angular.architecture.eventDriven.explanation': 'Event-Driven Architecture uses events as the primary means of communication. Components react to events instead of communicating directly.',
  'angular.architecture.eventDriven.benefit1': 'Loose coupling',
  'angular.architecture.eventDriven.benefit2': 'High extensibility',
  'angular.architecture.eventDriven.benefit3': 'Easy to add new features',
  'angular.architecture.eventDriven.benefit4': 'Audit trail possible',
  'angular.architecture.eventDriven.useCase1': 'Complex user flows',
  'angular.architecture.eventDriven.useCase2': 'Analytics integration',
  'angular.architecture.eventDriven.useCase3': 'State synchronization',
  'angular.architecture.eventDriven.implementation1': 'Event bus service',
  'angular.architecture.eventDriven.implementation2': 'Domain events',
  'angular.architecture.eventDriven.implementation3': 'Event handler services',
  'angular.architecture.eventDriven.implementation4': 'Type-safe events',
  'angular.architecture.eventDriven.challenge1': 'Difficult debugging',
  'angular.architecture.eventDriven.challenge2': 'Event ordering problems',

  'angular.architecture.microFrontends.title': 'Micro Frontends',
  'angular.architecture.microFrontends.description': 'Modular frontend architecture with Module Federation and independent teams',
  'angular.architecture.microFrontends.detailTitle': 'Micro Frontends',
  'angular.architecture.microFrontends.explanation': 'Micro Frontends extend the microservices concept to the frontend. Independent teams develop and deploy features autonomously with Module Federation.',
  'angular.architecture.microFrontends.benefit1': 'Independent deployments',
  'angular.architecture.microFrontends.benefit2': 'Team autonomy',
  'angular.architecture.microFrontends.benefit3': 'Technology flexibility',
  'angular.architecture.microFrontends.benefit4': 'Scalable teams',
  'angular.architecture.microFrontends.useCase1': 'Large enterprise portals',
  'angular.architecture.microFrontends.useCase2': 'Multi-team organization',
  'angular.architecture.microFrontends.useCase3': 'Legacy migration',
  'angular.architecture.microFrontends.implementation1': 'Webpack Module Federation',
  'angular.architecture.microFrontends.implementation2': 'Shell and remote apps',
  'angular.architecture.microFrontends.implementation3': 'Shared dependencies',
  'angular.architecture.microFrontends.implementation4': 'Event bus for communication',
  'angular.architecture.microFrontends.challenge1': 'Complex build configuration',
  'angular.architecture.microFrontends.challenge2': 'Version management',

  'angular.architecture.ddd.title': 'Domain-Driven Design',
  'angular.architecture.ddd.description': 'Modeling complex business logic with Aggregates, Entities and Value Objects',
  'angular.architecture.ddd.detailTitle': 'Domain-Driven Design',
  'angular.architecture.ddd.explanation': 'DDD focuses on the business domain. Entities, Value Objects and Aggregates model complex business rules. The Ubiquitous Language connects dev and business.',
  'angular.architecture.ddd.benefit1': 'Business-focused models',
  'angular.architecture.ddd.benefit2': 'Common language',
  'angular.architecture.ddd.benefit3': 'Clear domain boundaries',
  'angular.architecture.ddd.benefit4': 'Robust business logic',
  'angular.architecture.ddd.useCase1': 'Complex business domains',
  'angular.architecture.ddd.useCase2': 'Long-term projects',
  'angular.architecture.ddd.useCase3': 'Teams working closely with business',
  'angular.architecture.ddd.implementation1': 'Entities with identity',
  'angular.architecture.ddd.implementation2': 'Immutable value objects',
  'angular.architecture.ddd.implementation3': 'Aggregate roots',
  'angular.architecture.ddd.implementation4': 'Domain services',
  'angular.architecture.ddd.challenge1': 'Steep learning curve',
  'angular.architecture.ddd.challenge2': 'Overhead for simple domains',

  'angular.architecture.hexagonal.title': 'Hexagonal Architecture',
  'angular.architecture.hexagonal.description': 'Ports & Adapters Pattern - core business logic isolated from external infrastructure',
  'angular.architecture.hexagonal.detailTitle': 'Hexagonal Architecture (Ports & Adapters)',
  'angular.architecture.hexagonal.explanation': 'Hexagonal Architecture completely separates domain logic from external infrastructure. Ports define interfaces, Adapters implement them for concrete technologies.',
  'angular.architecture.hexagonal.benefit1': 'Complete testability of domain logic',
  'angular.architecture.hexagonal.benefit2': 'Interchangeable infrastructure components',
  'angular.architecture.hexagonal.benefit3': 'Clear inward dependency direction',
  'angular.architecture.hexagonal.benefit4': 'Framework independence',
  'angular.architecture.hexagonal.useCase1': 'Business-critical applications',
  'angular.architecture.hexagonal.useCase2': 'Legacy system migration',
  'angular.architecture.hexagonal.useCase3': 'Multi-channel applications',
  'angular.architecture.hexagonal.implementation1': 'Define Port interfaces in Domain',
  'angular.architecture.hexagonal.implementation2': 'Use Cases with Port dependencies',
  'angular.architecture.hexagonal.implementation3': 'Adapters for HTTP, database, etc.',
  'angular.architecture.hexagonal.implementation4': 'DI configuration for Port-Adapter binding',
  'angular.architecture.hexagonal.challenge1': 'More abstraction overhead',
  'angular.architecture.hexagonal.challenge2': 'Complexity for simple apps',

  'angular.architecture.stateManagement.title': 'Centralized State Management',
  'angular.architecture.stateManagement.description': 'Central app state with Signal Store, NgRx or Akita for predictable data flow',
  'angular.architecture.stateManagement.detailTitle': 'Centralized State Management',
  'angular.architecture.stateManagement.explanation': 'Centralized State Management maintains entire app state in one place. With Signals, NgRx or Akita, state becomes predictable and traceable.',
  'angular.architecture.stateManagement.benefit1': 'Single Source of Truth',
  'angular.architecture.stateManagement.benefit2': 'Predictable state updates',
  'angular.architecture.stateManagement.benefit3': 'Debugging and time-travel',
  'angular.architecture.stateManagement.benefit4': 'Easy state sharing',
  'angular.architecture.stateManagement.useCase1': 'Complex data flows',
  'angular.architecture.stateManagement.useCase2': 'Multi-view synchronization',
  'angular.architecture.stateManagement.useCase3': 'Offline-capable apps',
  'angular.architecture.stateManagement.implementation1': 'Signal Store with computed selectors',
  'angular.architecture.stateManagement.implementation2': 'Immutable state updates',
  'angular.architecture.stateManagement.implementation3': 'Action methods for mutations',
  'angular.architecture.stateManagement.implementation4': 'Service injection in components',
  'angular.architecture.stateManagement.challenge1': 'Boilerplate code',
  'angular.architecture.stateManagement.challenge2': 'Learning curve for complex stores',

  'angular.architecture.onion.title': 'Onion Architecture',
  'angular.architecture.onion.description': 'Layered architecture with Domain Core at center, surrounded by Application and Infrastructure',
  'angular.architecture.onion.detailTitle': 'Onion Architecture',
  'angular.architecture.onion.explanation': 'Onion Architecture organizes code in concentric layers. Domain Core at the center has no dependencies, outer layers depend on inner ones.',
  'angular.architecture.onion.benefit1': 'Domain logic completely independent',
  'angular.architecture.onion.benefit2': 'Clear layer separation',
  'angular.architecture.onion.benefit3': 'High testability',
  'angular.architecture.onion.benefit4': 'Long-term maintainability',
  'angular.architecture.onion.useCase1': 'Enterprise applications',
  'angular.architecture.onion.useCase2': 'Long-lived projects',
  'angular.architecture.onion.useCase3': 'Cross-team development',
  'angular.architecture.onion.implementation1': 'Domain entities without dependencies',
  'angular.architecture.onion.implementation2': 'Domain services layer',
  'angular.architecture.onion.implementation3': 'Application services with use cases',
  'angular.architecture.onion.implementation4': 'Infrastructure & Presentation outside',
  'angular.architecture.onion.challenge1': 'Many layers increase complexity',
  'angular.architecture.onion.challenge2': 'Difficult for small projects',

  'angular.architecture.mvvm.title': 'MVVM Pattern',
  'angular.architecture.mvvm.description': 'Model-View-ViewModel pattern with Reactive Forms and Data Binding as ViewModel layer',
  'angular.architecture.mvvm.detailTitle': 'MVVM Pattern',
  'angular.architecture.mvvm.explanation': 'MVVM separates View (Template), ViewModel (Component with Reactive Forms) and Model (Domain). Data Binding automatically synchronizes View and ViewModel.',
  'angular.architecture.mvvm.benefit1': 'Clear Separation of Concerns',
  'angular.architecture.mvvm.benefit2': 'Testable view logic',
  'angular.architecture.mvvm.benefit3': 'Reactive data flows',
  'angular.architecture.mvvm.benefit4': 'Two-way binding advantages',
  'angular.architecture.mvvm.useCase1': 'Form-heavy applications',
  'angular.architecture.mvvm.useCase2': 'Dashboard views',
  'angular.architecture.mvvm.useCase3': 'Data entry screens',
  'angular.architecture.mvvm.implementation1': 'Reactive Forms as ViewModel',
  'angular.architecture.mvvm.implementation2': 'Computed properties for view state',
  'angular.architecture.mvvm.implementation3': 'Commands as component methods',
  'angular.architecture.mvvm.implementation4': 'Model services for business logic',
  'angular.architecture.mvvm.challenge1': 'ViewModel can become complex',
  'angular.architecture.mvvm.challenge2': 'Overhead for simple views',

  'angular.tools.cli.title': 'Angular CLI',
  'angular.tools.cli.description': 'Command Line Interface for rapid development',
  'angular.tools.devtools.title': 'Angular DevTools',
  'angular.tools.devtools.description': 'Browser extension for debugging and profiling',
  'angular.tools.devtools.feature1': 'Component Tree Inspector',
  'angular.tools.devtools.feature2': 'Dependency Injection Visualizer',
  'angular.tools.devtools.feature3': 'Performance Profiler',
  'angular.tools.devtools.feature4': 'Change Detection Debugger',
  'angular.tools.build.title': 'Build System',
  'angular.tools.build.description': 'Modern build system with Vite and ESBuild',
  'angular.tools.build.feature1': 'Extremely fast build times',
  'angular.tools.build.feature2': 'Hot Module Replacement (HMR)',
  'angular.tools.build.feature3': 'Optimized Production Builds',
  'angular.tools.build.feature4': 'Source Maps Support',

  // Common translations
  'angular.common.clickForDetails': 'Click for details',
  'angular.common.useCases': 'Use Cases',
  'angular.common.implementation': 'Implementation',
  'angular.common.setup': 'Installation & Setup',
  'angular.common.configuration': 'Configuration',
  'angular.common.steps': 'Steps',
  'angular.common.example': 'Example',
  'angular.common.bestPractices': 'Best Practices',
  'angular.common.benefits': 'Benefits',
  'angular.common.challenges': 'Challenges',
  'angular.common.problem': 'Problem',
  'angular.common.solution': 'Solution',

  // Sections
  'angular.sections.realWorldPatterns': 'Real-World Patterns',
  'angular.sections.realWorldPatternsDesc': 'Battle-tested solutions for common development scenarios',
  'angular.sections.developmentTools': 'Development Tools',
  'angular.sections.developmentToolsDesc': 'Modern tools and configurations for professional Angular development',
  'angular.sections.deployment': 'Deployment Strategies',
  'angular.sections.deploymentDesc': 'Best practices for CI/CD, Docker and cloud deployment',
  'angular.sections.accessibility': 'Accessibility (a11y)',
  'angular.sections.accessibilityDesc': 'WCAG-compliant implementations for inclusive web applications',
  'angular.sections.commonPitfalls': 'Common Pitfalls & Anti-Patterns',
  'angular.sections.commonPitfallsDesc': 'Avoid typical mistakes and write clean code',
  'angular.sections.resources': 'Resources & Links',
  'angular.sections.resourcesDesc': 'Useful sources for learning and community support',

  // Real-World Patterns
  'angular.realWorldPatterns.errorBoundary.title': 'Error Boundary Pattern',
  'angular.realWorldPatterns.errorBoundary.description': 'Graceful error handling with centralized error components',
  'angular.realWorldPatterns.errorBoundary.useCase1': 'Catch errors in child components',
  'angular.realWorldPatterns.errorBoundary.useCase2': 'Display user-friendly error messages',
  'angular.realWorldPatterns.errorBoundary.useCase3': 'Implement retry mechanisms',
  'angular.realWorldPatterns.errorBoundary.useCase4': 'Centrally log and track errors',
  'angular.realWorldPatterns.loadingState.title': 'Loading State Pattern',
  'angular.realWorldPatterns.loadingState.description': 'Unified management of loading, error and empty states',
  'angular.realWorldPatterns.loadingState.useCase1': 'Global loading indicator',
  'angular.realWorldPatterns.loadingState.useCase2': 'Skeleton screens for better UX',
  'angular.realWorldPatterns.loadingState.useCase3': 'Coordinate concurrent requests',
  'angular.realWorldPatterns.loadingState.useCase4': 'Elegantly display empty states',
  'angular.realWorldPatterns.retryLogic.title': 'Retry Logic Pattern',
  'angular.realWorldPatterns.retryLogic.description': 'Intelligent retry strategies with exponential backoff',
  'angular.realWorldPatterns.retryLogic.useCase1': 'Automatically retry network errors',
  'angular.realWorldPatterns.retryLogic.useCase2': 'Work around rate limiting',
  'angular.realWorldPatterns.retryLogic.useCase3': 'Handle temporary server errors',
  'angular.realWorldPatterns.retryLogic.useCase4': 'Progressive backoff strategies',
  'angular.realWorldPatterns.optimisticUpdates.title': 'Optimistic Updates',
  'angular.realWorldPatterns.optimisticUpdates.description': 'Immediate UI updates with rollback on errors',
  'angular.realWorldPatterns.optimisticUpdates.useCase1': 'Like/Unlike features',
  'angular.realWorldPatterns.optimisticUpdates.useCase2': 'Todo list updates',
  'angular.realWorldPatterns.optimisticUpdates.useCase3': 'Form submissions',
  'angular.realWorldPatterns.optimisticUpdates.useCase4': 'Shopping cart updates',
  'angular.realWorldPatterns.polling.title': 'Polling Pattern',
  'angular.realWorldPatterns.polling.description': 'Periodic server queries for real-time-like updates',
  'angular.realWorldPatterns.polling.useCase1': 'Monitor job status',
  'angular.realWorldPatterns.polling.useCase2': 'Update dashboard data',
  'angular.realWorldPatterns.polling.useCase3': 'Fetch notifications',
  'angular.realWorldPatterns.polling.useCase4': 'Live scores and prices',
  'angular.realWorldPatterns.websocket.title': 'WebSocket Integration',
  'angular.realWorldPatterns.websocket.description': 'Bidirectional real-time communication with automatic reconnect',
  'angular.realWorldPatterns.websocket.useCase1': 'Chat applications',
  'angular.realWorldPatterns.websocket.useCase2': 'Live collaboration',
  'angular.realWorldPatterns.websocket.useCase3': 'Real-time notifications',
  'angular.realWorldPatterns.websocket.useCase4': 'Gaming and live events',

  // Development Tools
  'angular.developmentTools.schematics.title': 'Angular Schematics',
  'angular.developmentTools.schematics.description': 'Custom code generators for repeatable project structures',
  'angular.developmentTools.eslint.title': 'ESLint Configuration',
  'angular.developmentTools.eslint.description': 'Ensure code quality with modern ESLint 9+ setup',
  'angular.developmentTools.prettier.title': 'Prettier Code Formatter',
  'angular.developmentTools.prettier.description': 'Consistent code formatting across the team',
  'angular.developmentTools.husky.title': 'Husky Git Hooks',
  'angular.developmentTools.husky.description': 'Automated quality checks before commits and pushes',
  'angular.developmentTools.conventionalCommits.title': 'Conventional Commits',
  'angular.developmentTools.conventionalCommits.description': 'Standardized commit messages for better history',

  // Deployment Strategies
  'angular.deploymentStrategies.docker.title': 'Docker Container Setup',
  'angular.deploymentStrategies.docker.description': 'Multi-stage Docker builds for optimized production images',
  'angular.deploymentStrategies.docker.step1': 'Create multi-stage Dockerfile',
  'angular.deploymentStrategies.docker.step2': 'Configure Nginx as production server',
  'angular.deploymentStrategies.docker.step3': 'Docker Compose for local development',
  'angular.deploymentStrategies.docker.step4': 'Implement health checks',
  'angular.deploymentStrategies.docker.step5': 'Optimize image size',
  'angular.deploymentStrategies.cicd.title': 'CI/CD Pipelines',
  'angular.deploymentStrategies.cicd.description': 'Automated builds and deployments with GitHub Actions and GitLab CI',
  'angular.deploymentStrategies.cicd.step1': 'Create workflow file',
  'angular.deploymentStrategies.cicd.step2': 'Configure lint, test and build jobs',
  'angular.deploymentStrategies.cicd.step3': 'Set up deployment pipeline',
  'angular.deploymentStrategies.cicd.step4': 'Environment-specific deployments',
  'angular.deploymentStrategies.cicd.step5': 'Implement rollback strategies',
  'angular.deploymentStrategies.envVariables.title': 'Environment Variables',
  'angular.deploymentStrategies.envVariables.description': 'Secure configuration management across environments',
  'angular.deploymentStrategies.envVariables.step1': 'Structure environment files',
  'angular.deploymentStrategies.envVariables.step2': 'Load runtime configuration',
  'angular.deploymentStrategies.envVariables.step3': 'Docker environment variables',
  'angular.deploymentStrategies.envVariables.step4': 'Secrets management',
  'angular.deploymentStrategies.featureFlags.title': 'Feature Flags',
  'angular.deploymentStrategies.featureFlags.description': 'Dynamic feature control without redeployment',
  'angular.deploymentStrategies.featureFlags.step1': 'Implement feature flag service',
  'angular.deploymentStrategies.featureFlags.step2': 'Create feature flag directive',
  'angular.deploymentStrategies.featureFlags.step3': 'Remote config integration',
  'angular.deploymentStrategies.featureFlags.step4': 'A/B testing setup',
  'angular.deploymentStrategies.monitoring.title': 'Monitoring & Analytics',
  'angular.deploymentStrategies.monitoring.description': 'Error tracking, performance monitoring and user analytics',
  'angular.deploymentStrategies.monitoring.step1': 'Integrate Sentry error tracking',
  'angular.deploymentStrategies.monitoring.step2': 'Google Analytics 4 setup',
  'angular.deploymentStrategies.monitoring.step3': 'Capture performance metrics',
  'angular.deploymentStrategies.monitoring.step4': 'Custom logging service',
  'angular.deploymentStrategies.monitoring.step5': 'Real User Monitoring (RUM)',

  // Accessibility Patterns
  'angular.accessibility.ariaLabels.title': 'ARIA Labels & Attributes',
  'angular.accessibility.ariaLabels.description': 'Semantic labeling for assistive technologies',
  'angular.accessibility.ariaLabels.tip1': 'Always use aria-label for icon buttons',
  'angular.accessibility.ariaLabels.tip2': 'aria-describedby for additional context',
  'angular.accessibility.ariaLabels.tip3': 'aria-live for dynamic content updates',
  'angular.accessibility.ariaLabels.tip4': 'aria-expanded for accordions and dropdowns',
  'angular.accessibility.keyboardNav.title': 'Keyboard Navigation',
  'angular.accessibility.keyboardNav.description': 'Complete operability without a mouse',
  'angular.accessibility.keyboardNav.tip1': 'Tab navigation for all interactive elements',
  'angular.accessibility.keyboardNav.tip2': 'Arrow keys for lists and menus',
  'angular.accessibility.keyboardNav.tip3': 'Enter/Space for buttons and links',
  'angular.accessibility.keyboardNav.tip4': 'Escape to close modals',
  'angular.accessibility.keyboardNav.tip5': 'Visible focus indicators',
  'angular.accessibility.focusManagement.title': 'Focus Management',
  'angular.accessibility.focusManagement.description': 'Intelligent focus control for better UX',
  'angular.accessibility.focusManagement.tip1': 'Implement focus trap in modals',
  'angular.accessibility.focusManagement.tip2': 'Auto-focus on first input in forms',
  'angular.accessibility.focusManagement.tip3': 'Restore focus after closing modals',
  'angular.accessibility.focusManagement.tip4': 'Skip links for quick navigation',
  'angular.accessibility.screenReader.title': 'Screen Reader Support',
  'angular.accessibility.screenReader.description': 'Optimal support for screen readers',
  'angular.accessibility.screenReader.tip1': 'Live regions for status updates',
  'angular.accessibility.screenReader.tip2': 'Screen-reader-only class for visual hiding',
  'angular.accessibility.screenReader.tip3': 'Use semantic HTML',
  'angular.accessibility.screenReader.tip4': 'Alt text for all images',
  'angular.accessibility.screenReader.tip5': 'Correct heading hierarchy',

  // Common Pitfalls
  'angular.pitfalls.memoryLeaks.title': 'Avoid Memory Leaks',
  'angular.pitfalls.memoryLeaks.description': 'Properly clean up subscriptions and event listeners',
  'angular.pitfalls.changeDetection.title': 'Change Detection Issues',
  'angular.pitfalls.changeDetection.description': 'Correctly use immutable updates and OnPush',
  'angular.pitfalls.zoneJs.title': 'Zone.js Performance Issues',
  'angular.pitfalls.zoneJs.description': 'Avoid unnecessary change detection cycles',
  'angular.pitfalls.antiPatterns.title': 'Anti-Patterns',
  'angular.pitfalls.antiPatterns.description': 'Common mistakes in Angular architecture',

  // Resources
  'angular.resources.official.title': 'Official Documentation',
  'angular.resources.official.description': 'Angular.dev, GitHub repository and official resources',
  'angular.resources.community.title': 'Community & Support',
  'angular.resources.community.description': 'Discord, Reddit, Stack Overflow and meetups',
  'angular.resources.learning.title': 'Online Courses',
  'angular.resources.learning.description': 'High-quality learning platforms for Angular',
  'angular.resources.youtube.title': 'YouTube Channels',
  'angular.resources.youtube.description': 'Tutorials, updates and best practices',
  'angular.resources.blogs.title': 'Blogs & Articles',
  'angular.resources.blogs.description': 'Technical deep-dives and news',
  'angular.resources.tools.title': 'Developer Tools',
  'angular.resources.tools.description': 'DevTools, playgrounds and documentation tools',
  'angular.resources.libraries.title': 'UI Libraries',
  'angular.resources.libraries.description': 'Component libraries and state management',
  'angular.resources.newsletters.title': 'Newsletters',
  'angular.resources.newsletters.description': 'Weekly updates and news',

  // Crypto Detail Modal
  'crypto.detail.loading': 'Loading Details...',
  'crypto.detail.loadingSubtitle': 'Fetching detailed information',
  'crypto.detail.error.title': 'Loading Error',
  'crypto.detail.error.retry': 'Retry',
  'crypto.detail.close': 'Close',
  'crypto.detail.rank': 'Market Rank',
  'crypto.detail.currentPrice': 'Current Price',
  'crypto.detail.marketStats': 'Market Statistics',
  'crypto.detail.marketCap': 'Market Cap',
  'crypto.detail.volume24h': '24h Volume',
  'crypto.detail.high24h': '24h High',
  'crypto.detail.low24h': '24h Low',
  'crypto.detail.supply': 'Supply',
  'crypto.detail.circulatingSupply': 'Circulating Supply',
  'crypto.detail.totalSupply': 'Total Supply',
  'crypto.detail.maxSupply': 'Max Supply',
  'crypto.detail.records': 'Records',
  'crypto.detail.allTimeHigh': 'All-Time High',
  'crypto.detail.allTimeLow': 'All-Time Low',
  'crypto.detail.about': 'About',
  'crypto.detail.links': 'Links',
  'crypto.detail.website': 'Website',

  // Common
  'common.close': 'Close',

  // Angular Summary Dialog
  'angularSummary.explanation': 'Explanation',
  'angularSummary.codeExample': 'Code Example',
  'angularSummary.benefits': 'Benefits',
  'angularSummary.useCases': 'Use Cases',
  'angularSummary.example': 'Example',
  'angularSummary.detailedPractices': 'Detailed Best Practices',
  'angularSummary.antiPatterns': 'Avoid',
  'angularSummary.quickTips': 'Quick Tips',

  // Best Practices Details
  'angular.bestPractices.components.detailTitle': 'Component Best Practices',
  'angular.bestPractices.components.explanation': 'Modern Angular components use Standalone Architecture, Signals for reactive state, and OnPush Change Detection for optimal performance.',
  'angular.bestPractices.components.benefit1': 'Better Reusability',
  'angular.bestPractices.components.benefit2': 'Easier Testing',
  'angular.bestPractices.components.benefit3': 'Optimal Performance',
  'angular.bestPractices.components.antiPattern1': 'Logic in template instead of component',
  'angular.bestPractices.components.antiPattern2': 'Direct DOM access without ViewChild',
  'angular.bestPractices.components.antiPattern3': 'Large components without separation',

  'angular.bestPractices.state.detailTitle': 'State Management Best Practices',
  'angular.bestPractices.state.explanation': 'Use Signals for reactive state management with automatic dependency tracking and minimal change detection cycles.',
  'angular.bestPractices.state.benefit1': 'Automatic Updates',
  'angular.bestPractices.state.benefit2': 'Type-Safe State',
  'angular.bestPractices.state.benefit3': 'Immutable Patterns',
  'angular.bestPractices.state.antiPattern1': 'Direct mutation of arrays/objects',
  'angular.bestPractices.state.antiPattern2': 'Duplicating state across components',
  'angular.bestPractices.state.antiPattern3': 'No clear single source of truth',

  'angular.bestPractices.templates.detailTitle': 'Template Best Practices',
  'angular.bestPractices.templates.explanation': 'Use the new Control Flow syntax (@if, @for, @switch) and @defer for better performance and developer experience.',
  'angular.bestPractices.templates.benefit1': 'Better Readability',
  'angular.bestPractices.templates.benefit2': 'Type Safety',
  'angular.bestPractices.templates.benefit3': 'Optimized Performance',
  'angular.bestPractices.templates.antiPattern1': 'Complex logic in templates',
  'angular.bestPractices.templates.antiPattern2': '@for without track by',
  'angular.bestPractices.templates.antiPattern3': 'Excessive pipe usage',

  'angular.bestPractices.services.detailTitle': 'Service Best Practices',
  'angular.bestPractices.services.explanation': 'Services should be stateless, have clear responsibilities, and use Signals for reactive data.',
  'angular.bestPractices.services.benefit1': 'Reusability',
  'angular.bestPractices.services.benefit2': 'Easy Testing',
  'angular.bestPractices.services.benefit3': 'Clear Separation of Concerns',
  'angular.bestPractices.services.antiPattern1': 'Services with UI logic',
  'angular.bestPractices.services.antiPattern2': 'Missing error handling',
  'angular.bestPractices.services.antiPattern3': 'No Observable cleanup',

  'angular.bestPractices.performance.detailTitle': 'Performance Best Practices',
  'angular.bestPractices.performance.explanation': 'Optimize performance through OnPush Change Detection, trackBy in lists, Lazy Loading, and @defer for below-the-fold content.',
  'angular.bestPractices.performance.benefit1': 'Faster Load Times',
  'angular.bestPractices.performance.benefit2': 'Fewer Re-Renders',
  'angular.bestPractices.performance.benefit3': 'Better UX',
  'angular.bestPractices.performance.antiPattern1': 'No Change Detection Strategy',
  'angular.bestPractices.performance.antiPattern2': 'Large bundles without code splitting',
  'angular.bestPractices.performance.antiPattern3': 'Unoptimized images and assets',

  'angular.bestPractices.typescript.detailTitle': 'TypeScript Best Practices',
  'angular.bestPractices.typescript.explanation': 'Use strict TypeScript configuration with all compiler checks for maximum type safety and fewer runtime errors.',
  'angular.bestPractices.typescript.benefit1': 'Compile-Time Errors',
  'angular.bestPractices.typescript.benefit2': 'Better IDE Support',
  'angular.bestPractices.typescript.benefit3': 'Self-Documenting Code',
  'angular.bestPractices.typescript.antiPattern1': 'Using any type',
  'angular.bestPractices.typescript.antiPattern2': 'Abusing type assertions',
  'angular.bestPractices.typescript.antiPattern3': 'Disabling strict checks',

  'angular.bestPractices.accessibility.detailTitle': 'Accessibility Best Practices',
  'angular.bestPractices.accessibility.explanation': 'Ensure your application is accessible to all users through semantic HTML, ARIA attributes, and keyboard navigation.',
  'angular.bestPractices.accessibility.benefit1': 'Larger Audience',
  'angular.bestPractices.accessibility.benefit2': 'Better SEO',
  'angular.bestPractices.accessibility.benefit3': 'Legal Compliance',
  'angular.bestPractices.accessibility.antiPattern1': 'Missing ARIA labels',
  'angular.bestPractices.accessibility.antiPattern2': 'No keyboard navigation',
  'angular.bestPractices.accessibility.antiPattern3': 'Poor color contrasts',

  'angular.bestPractices.testing.detailTitle': 'Testing Best Practices',
  'angular.bestPractices.testing.explanation': 'Write meaningful tests for components and services with high coverage and clear assertions.',
  'angular.bestPractices.testing.benefit1': 'Fewer Bugs',
  'angular.bestPractices.testing.benefit2': 'Safe Refactoring',
  'angular.bestPractices.testing.benefit3': 'Living Documentation',
  'angular.bestPractices.testing.antiPattern1': 'Testing implementation instead of behavior',
  'angular.bestPractices.testing.antiPattern2': 'No test isolation',
  'angular.bestPractices.testing.antiPattern3': 'Too many mocks',

  'angular.bestPractices.errorHandling.detailTitle': 'Error Handling Best Practices',
  'angular.bestPractices.errorHandling.explanation': 'Implement global error handling, meaningful error messages, and error boundaries for robust applications.',
  'angular.bestPractices.errorHandling.benefit1': 'Better User Experience',
  'angular.bestPractices.errorHandling.benefit2': 'Easier Debugging',
  'angular.bestPractices.errorHandling.benefit3': 'More Robust Applications',
  'angular.bestPractices.errorHandling.antiPattern1': 'Swallowing errors',
  'angular.bestPractices.errorHandling.antiPattern2': 'No error logs',
  'angular.bestPractices.errorHandling.antiPattern3': 'Generic error messages',

  'angular.bestPractices.security.detailTitle': 'Security Best Practices',
  'angular.bestPractices.security.explanation': 'Protect your application from XSS, CSRF, and other security risks through DomSanitizer, Content Security Policy, and secure HTTP practices.',
  'angular.bestPractices.security.benefit1': 'Protection from XSS attacks',
  'angular.bestPractices.security.benefit2': 'Secure data transmission',
  'angular.bestPractices.security.benefit3': 'OWASP Compliance',
  'angular.bestPractices.security.antiPattern1': 'Rendering unsanitized HTML',
  'angular.bestPractices.security.antiPattern2': 'Sensitive data in LocalStorage',
  'angular.bestPractices.security.antiPattern3': 'Missing HTTPS',

  'angular.bestPractices.codeOrganization.detailTitle': 'Code Organization Best Practices',
  'angular.bestPractices.codeOrganization.explanation': 'Organize your code by features with clear folder structure, barrel exports, and separation of concerns.',
  'angular.bestPractices.codeOrganization.benefit1': 'Better Maintainability',
  'angular.bestPractices.codeOrganization.benefit2': 'Easier Onboarding',
  'angular.bestPractices.codeOrganization.benefit3': 'Scalable Architecture',
  'angular.bestPractices.codeOrganization.antiPattern1': 'Flat folder structure',
  'angular.bestPractices.codeOrganization.antiPattern2': 'Mixed concerns',
  'angular.bestPractices.codeOrganization.antiPattern3': 'No naming conventions',

  'angular.bestPractices.dependency.detailTitle': 'Dependency Injection Best Practices',
  'angular.bestPractices.dependency.explanation': 'Use inject() for modern DI, Injection Tokens for configuration, and providedIn for tree-shakeable services.',
  'angular.bestPractices.dependency.benefit1': 'Better Tree-Shaking',
  'angular.bestPractices.dependency.benefit2': 'Clear Dependencies',
  'angular.bestPractices.dependency.benefit3': 'Easy Testing',
  'angular.bestPractices.dependency.antiPattern1': 'Bypassing service singleton',
  'angular.bestPractices.dependency.antiPattern2': 'Circular dependencies',
  'angular.bestPractices.dependency.antiPattern3': 'No injection tokens',

  'angular.bestPractices.buildDeploy.detailTitle': 'Build & Deploy Best Practices',
  'angular.bestPractices.buildDeploy.explanation': 'Optimize production builds with budgets, environment variables, and automated CI/CD pipelines.',
  'angular.bestPractices.buildDeploy.benefit1': 'Fast Deployments',
  'angular.bestPractices.buildDeploy.benefit2': 'Smaller Bundle Sizes',
  'angular.bestPractices.buildDeploy.benefit3': 'Automated Quality Checks',
  'angular.bestPractices.buildDeploy.antiPattern1': 'No build budgets',
  'angular.bestPractices.buildDeploy.antiPattern2': 'Secrets in code',
  'angular.bestPractices.buildDeploy.antiPattern3': 'Manual deployments',

  // Advanced Topics Details
  'angular.advanced.routing.detailTitle': 'Advanced Routing',
  'angular.advanced.routing.explanation': 'Modern Angular routing with functional guards, resolvers, and code-splitting for optimal performance.',
  'angular.advanced.routing.benefit1': 'Code-splitting & Lazy Loading',
  'angular.advanced.routing.benefit2': 'Type-safe Guards & Resolvers',
  'angular.advanced.routing.benefit3': 'Optimized Navigation',
  'angular.advanced.routing.antiPattern1': 'No lazy loading strategy',
  'angular.advanced.routing.antiPattern2': 'Missing guard implementation',
  'angular.advanced.routing.antiPattern3': 'Unstructured route definitions',

  'angular.advanced.forms.detailTitle': 'Reactive Forms',
  'angular.advanced.forms.explanation': 'Typed Reactive Forms with TypeScript type safety, custom validators, and async validation for complex forms.',
  'angular.advanced.forms.benefit1': 'Full Type Safety',
  'angular.advanced.forms.benefit2': 'Reactive Validation',
  'angular.advanced.forms.benefit3': 'Reusable Validators',
  'angular.advanced.forms.antiPattern1': 'Template-driven forms for complex logic',
  'angular.advanced.forms.antiPattern2': 'Missing error handling',
  'angular.advanced.forms.antiPattern3': 'No custom validators',

  'angular.advanced.rxjs.detailTitle': 'RxJS Mastery',
  'angular.advanced.rxjs.explanation': 'Advanced RxJS patterns with higher-order observables, error handling, and memory leak prevention.',
  'angular.advanced.rxjs.benefit1': 'Efficient Stream Management',
  'angular.advanced.rxjs.benefit2': 'Automatic Error Handling',
  'angular.advanced.rxjs.benefit3': 'Memory Leak Prevention',
  'angular.advanced.rxjs.antiPattern1': 'Missing unsubscribe logic',
  'angular.advanced.rxjs.antiPattern2': 'Nested subscriptions',
  'angular.advanced.rxjs.antiPattern3': 'No error handling',

  'angular.advanced.changeDetection.detailTitle': 'Change Detection Optimization',
  'angular.advanced.changeDetection.explanation': 'OnPush change detection, signals, and zone-less Angular for maximum performance optimization.',
  'angular.advanced.changeDetection.benefit1': 'Significantly Fewer Checks',
  'angular.advanced.changeDetection.benefit2': 'Better Performance',
  'angular.advanced.changeDetection.benefit3': 'Zone-less Possible',
  'angular.advanced.changeDetection.antiPattern1': 'Default change detection everywhere',
  'angular.advanced.changeDetection.antiPattern2': 'Mutable state updates',
  'angular.advanced.changeDetection.antiPattern3': 'Missing markForCheck() calls',

  'angular.advanced.animations.detailTitle': 'Angular Animations',
  'angular.advanced.animations.explanation': 'Complex animations with state management, route transitions, and stagger effects for modern UIs.',
  'angular.advanced.animations.benefit1': 'Smooth UI Transitions',
  'angular.advanced.animations.benefit2': 'Declarative Syntax',
  'angular.advanced.animations.benefit3': 'Performance-optimized',
  'angular.advanced.animations.antiPattern1': 'CSS animations in components',
  'angular.advanced.animations.antiPattern2': 'Missing animation callbacks',
  'angular.advanced.animations.antiPattern3': 'Overly complex animations',

  'angular.advanced.testing.detailTitle': 'Advanced Testing',
  'angular.advanced.testing.explanation': 'Comprehensive testing strategies with component tests, service tests, HTTP mocking, and E2E testing.',
  'angular.advanced.testing.benefit1': 'High Code Quality',
  'angular.advanced.testing.benefit2': 'Safe Refactoring',
  'angular.advanced.testing.benefit3': 'Automated Regression Tests',
  'angular.advanced.testing.antiPattern1': 'Testing implementation instead of behavior',
  'angular.advanced.testing.antiPattern2': 'Missing test isolation',
  'angular.advanced.testing.antiPattern3': 'No HTTP tests',

  'angular.advanced.ssr.detailTitle': 'Server-Side Rendering',
  'angular.advanced.ssr.explanation': 'Angular Universal for SEO, performance, and better first contentful paint with transfer state.',
  'angular.advanced.ssr.benefit1': 'Better SEO',
  'angular.advanced.ssr.benefit2': 'Faster Initial Load',
  'angular.advanced.ssr.benefit3': 'Improved Performance',
  'angular.advanced.ssr.antiPattern1': 'Browser APIs in server code',
  'angular.advanced.ssr.antiPattern2': 'Missing platform checks',
  'angular.advanced.ssr.antiPattern3': 'No transfer state',

  'angular.advanced.i18n.detailTitle': 'Internationalization',
  'angular.advanced.i18n.explanation': 'Runtime i18n with signal-based service for dynamic language switching and optimal UX.',
  'angular.advanced.i18n.benefit1': 'Dynamic Language Switching',
  'angular.advanced.i18n.benefit2': 'Lazy-loaded Translations',
  'angular.advanced.i18n.benefit3': 'Type-safe Keys',
  'angular.advanced.i18n.antiPattern1': 'Hardcoded strings',
  'angular.advanced.i18n.antiPattern2': 'All languages in bundle',
  'angular.advanced.i18n.antiPattern3': 'Missing pluralization',

  'angular.advanced.security.detailTitle': 'Security Best Practices',
  'angular.advanced.security.explanation': 'Comprehensive security with DomSanitizer, CSP, CSRF protection, and secure HTTP communication.',
  'angular.advanced.security.benefit1': 'XSS Protection',
  'angular.advanced.security.benefit2': 'CSRF Protection',
  'angular.advanced.security.benefit3': 'Content Security Policy',
  'angular.advanced.security.antiPattern1': 'Unsanitized HTML rendering',
  'angular.advanced.security.antiPattern2': 'Tokens in localStorage',
  'angular.advanced.security.antiPattern3': 'Missing CSP headers',

  'angular.advanced.directives.detailTitle': 'Custom Directives',
  'angular.advanced.directives.explanation': 'Structural and attribute directives for reusable DOM manipulation and extended functionality.',
  'angular.advanced.directives.benefit1': 'Reusable Logic',
  'angular.advanced.directives.benefit2': 'Clean Templates',
  'angular.advanced.directives.benefit3': 'Host Binding Power',
  'angular.advanced.directives.antiPattern1': 'Direct DOM manipulation',
  'angular.advanced.directives.antiPattern2': 'Overly complex directives',
  'angular.advanced.directives.antiPattern3': 'Missing error handling',

  'angular.advanced.pipes.detailTitle': 'Custom Pipes',
  'angular.advanced.pipes.explanation': 'Pure and impure pipes for data transformation with performance optimizations and memoization.',
  'angular.advanced.pipes.benefit1': 'Reusable Transformations',
  'angular.advanced.pipes.benefit2': 'Reduced Template Logic',
  'angular.advanced.pipes.benefit3': 'Automatic Caching (Pure)',
  'angular.advanced.pipes.antiPattern1': 'Impure pipes without reason',
  'angular.advanced.pipes.antiPattern2': 'Complex logic in pipes',
  'angular.advanced.pipes.antiPattern3': 'Missing type safety',

  'angular.advanced.httpInterceptors.detailTitle': 'HTTP Interceptors',
  'angular.advanced.httpInterceptors.explanation': 'Functional interceptors for auth, logging, error handling, and request/response transformation.',
  'angular.advanced.httpInterceptors.benefit1': 'Centralized HTTP Logic',
  'angular.advanced.httpInterceptors.benefit2': 'Automatic Auth Headers',
  'angular.advanced.httpInterceptors.benefit3': 'Global Error Handling',
  'angular.advanced.httpInterceptors.antiPattern1': 'Ignoring interceptor order',
  'angular.advanced.httpInterceptors.antiPattern2': 'Too many interceptors',
  'angular.advanced.httpInterceptors.antiPattern3': 'Missing error propagation',

  'angular.advanced.stateManagement.detailTitle': 'State Management',
  'angular.advanced.stateManagement.explanation': 'Signal-based stores for reactive state management with computed values and immutability.',
  'angular.advanced.stateManagement.benefit1': 'Centralized State Management',
  'angular.advanced.stateManagement.benefit2': 'Reactive Updates',
  'angular.advanced.stateManagement.benefit3': 'Immutable State',
  'angular.advanced.stateManagement.antiPattern1': 'State in components',
  'angular.advanced.stateManagement.antiPattern2': 'Mutable state updates',
  'angular.advanced.stateManagement.antiPattern3': 'No single source of truth',

  'angular.advanced.moduleFederation.detailTitle': 'Module Federation',
  'angular.advanced.moduleFederation.explanation': 'Micro-frontend architecture with Webpack Module Federation for scalable enterprise applications.',
  'angular.advanced.moduleFederation.benefit1': 'Independent Deployments',
  'angular.advanced.moduleFederation.benefit2': 'Team Scalability',
  'angular.advanced.moduleFederation.benefit3': 'Shared Dependencies',
  'angular.advanced.moduleFederation.antiPattern1': 'Tight coupling between MFEs',
  'angular.advanced.moduleFederation.antiPattern2': 'No version strategies',
  'angular.advanced.moduleFederation.antiPattern3': 'Too small MFEs',

  'angular.advanced.pwa.detailTitle': 'Progressive Web Apps',
  'angular.advanced.pwa.explanation': 'Offline-first PWAs with service worker, caching strategies, and push notifications.',
  'angular.advanced.pwa.benefit1': 'Offline Functionality',
  'angular.advanced.pwa.benefit2': 'Installable',
  'angular.advanced.pwa.benefit3': 'Push Notifications',
  'angular.advanced.pwa.antiPattern1': 'Too aggressive caching',
  'angular.advanced.pwa.antiPattern2': 'Missing update strategy',
  'angular.advanced.pwa.antiPattern3': 'No offline fallbacks',

  // Footer
  'crypto.backToHome.button': 'Back to Home',
  'crypto.backToHome.tooltip': 'Return to homepage',

  // Footer
  'footer.copyright': '2025 Mike Diethelm. Built with Angular 20.',
  'footer.github.title': 'GitHub Profile',
  'footer.linkedin.title': 'LinkedIn Profile',
  'footer.techstack': 'Angular • Material Design 3 • TypeScript'
};
